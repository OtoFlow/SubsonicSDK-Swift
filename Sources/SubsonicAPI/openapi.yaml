openapi: 3.1.0
info:
  title: Subsonic API
  version: 1.16.1
tags:
  - name: Authentication
  - name: System
  - name: Browsing
  - name: Lists
    description: Album/Song Lists
  - name: Searching
  - name: Playlists
  - name: Media Retrieval
  - name: Media Annotation
paths:
  /ping.view:
    post:
      tags:
        - Authentication
      operationId: signIn
      parameters:
        - name: u
          in: query
          required: true
          schema:
            type: string
        - name: t
          in: query
          required: true
          schema:
            type: string
        - name: s
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'ok'
          content:
            application/json:
              schema:
                required:
                  - subsonic-response
                properties:
                  subsonic-response:
                    $ref: '#/components/schemas/Response'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
  /ping:
    get:
      tags:
        - System
      operationId: ping
      responses:
        '200':
          description: 'ok'
          content:
            application/json:
              schema:
                required:
                  - subsonic-response
                properties:
                  subsonic-response:
                    $ref: '#/components/schemas/Response'
  /getGenres:
    get:
      tags:
        - Browsing
      operationId: getGenres
      responses:
        '200':
          description: 'ok'
          content:
            application/json:
              schema:
                required:
                  - subsonic-response
                properties:
                  subsonic-response:
                    allOf:
                      - $ref: '#/components/schemas/Response'
                      - type: object
                        required:
                          - genres
                        properties:
                          genres:
                            $ref: '#/components/schemas/Genres'
  /getArtists:
    get:
      tags:
        - Browsing
      operationId: getArtists
      parameters:
        - name: musicFolderId
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: 'ok'
          content:
            application/json:
              schema:
                required:
                  - subsonic-response
                properties:
                  subsonic-response:
                    allOf:
                      - $ref: '#/components/schemas/Response'
                      - type: object
                        required:
                          - artists
                        properties:
                          artists:
                            $ref: '#/components/schemas/ArtistsID3'
  /getArtist:
    get:
      tags:
        - Browsing
      operationId: getArtist
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'ok'
          content:
            application/json:
              schema:
                required:
                  - subsonic-response
                properties:
                  subsonic-response:
                    allOf:
                      - $ref: '#/components/schemas/Response'
                      - type: object
                        required:
                          - artist
                        properties:
                          artist:
                            $ref: '#/components/schemas/Artist'
  /getAlbum:
    get:
      tags:
        - Browsing
      operationId: getAlbum
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'ok'
          content:
            application/json:
              schema:
                required:
                  - subsonic-response
                properties:
                  subsonic-response:
                    allOf:
                      - $ref: '#/components/schemas/Response'
                      - type: object
                        required:
                          - album
                        properties:
                          album:
                            $ref: '#/components/schemas/AlbumWithSongsID3'
  /getAlbumList:
    get:
      tags:
        - Lists
      operationId: getAlbumList
      parameters:
        - name: type
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/ListType'
        - name: size
          in: query
          required: false
          schema:
            type: integer
        - name: offset
          in: query
          required: false
          schema:
            type: integer
        - name: fromYear
          in: query
          required: false
          schema:
            type: integer
        - name: toYear
          in: query
          required: false
          schema:
            type: integer
        - name: genre
          in: query
          required: false
          schema:
            type: string
        - name: musicFolderId
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: 'ok'
          content:
            application/json:
              schema:
                required:
                  - subsonic-response
                properties:
                  subsonic-response:
                    allOf:
                      - $ref: '#/components/schemas/Response'
                      - type: object
                        required:
                          - albumList
                        properties:
                          albumList:
                            $ref: '#/components/schemas/AlbumList'
  /getRandomSongs:
    get:
      tags:
        - Lists
      operationId: getRandomSongs
      parameters:
        - name: size
          in: query
          required: false
          schema:
            type: integer
        - name: genre
          in: query
          required: false
          schema:
            type: string
        - name: fromYear
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: toYear
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: musicFolderId
          in: query
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                required:
                  - subsonic-response
                properties:
                  subsonic-response:
                    allOf:
                      - $ref: '#/components/schemas/Response'
                      - type: object
                        required:
                          - randomSongs
                        properties:
                          randomSongs:
                            $ref: '#/components/schemas/Songs'
  /getSongsByGenre:
    get:
      tags:
        - Lists
      operationId: getSongsByGenre
      parameters:
        - name: genre
          in: query
          required: true
          schema:
            type: string
        - name: count
          in: query
          required: false
          schema:
            type: integer
        - name: offset
          in: query
          required: false
          schema:
            type: integer
        - name: musicFolderId
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: 'ok'
          content:
            application/json:
              schema:
                required:
                  - subsonic-response
                properties:
                  subsonic-response:
                    allOf:
                      - $ref: '#/components/schemas/Response'
                      - type: object
                        required:
                          - songsByGenre
                        properties:
                          songsByGenre:
                            $ref: '#/components/schemas/Songs'
  /getStarred:
    get:
      tags:
        - Lists
      operationId: getStarred
      parameters:
        - name: musicFolderId
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: 'ok'
          content:
            application/json:
              schema:
                required:
                  - subsonic-response
                properties:
                  subsonic-response:
                    allOf:
                      - $ref: '#/components/schemas/Response'
                      - type: object
                        required:
                          - starred
                        properties:
                          starred:
                            $ref: '#/components/schemas/Starred'
  /search2:
    get:
      tags:
        - Searching
      operationId: search
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
        - name: artistCount
          in: query
          required: false
          schema:
            type: integer
        - name: artistOffset
          in: query
          required: false
          schema:
            type: integer
        - name: albumCount
          in: query
          required: false
          schema:
            type: integer
        - name: albumOffset
          in: query
          required: false
          schema:
            type: integer
        - name: songCount
          in: query
          required: false
          schema:
            type: integer
        - name: songOffset
          in: query
          required: false
          schema:
            type: integer
        - name: musicFolderId
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: 'ok'
          content:
            application/json:
              schema:
                required:
                  - subsonic-response
                properties:
                  subsonic-response:
                    allOf:
                      - $ref: '#/components/schemas/Response'
                      - type: object
                        required:
                          - searchResult2
                        properties:
                          searchResult2:
                            $ref: '#/components/schemas/SearchResult'
  /search3:
    get:
      tags:
        - Searching
      operationId: searchID3
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
        - name: artistCount
          in: query
          required: false
          schema:
            type: integer
        - name: artistOffset
          in: query
          required: false
          schema:
            type: integer
        - name: albumCount
          in: query
          required: false
          schema:
            type: integer
        - name: albumOffset
          in: query
          required: false
          schema:
            type: integer
        - name: songCount
          in: query
          required: false
          schema:
            type: integer
        - name: songOffset
          in: query
          required: false
          schema:
            type: integer
        - name: musicFolderId
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: 'ok'
          content:
            application/json:
              schema:
                required:
                  - subsonic-response
                properties:
                  subsonic-response:
                    allOf:
                      - $ref: '#/components/schemas/Response'
                      - type: object
                        required:
                          - searchResult3
                        properties:
                          searchResult3:
                            $ref: '#/components/schemas/SearchResultID3'
  /getPlaylists:
    get:
      tags:
        - Playlists
      operationId: getPlaylists
      parameters:
        - name: username
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: 'ok'
          content:
            application/json:
              schema:
                required:
                  - subsonic-response
                properties:
                  subsonic-response:
                    allOf:
                      - $ref: '#/components/schemas/Response'
                      - type: object
                        required:
                          - playlists
                        properties:
                          playlists:
                            $ref: '#/components/schemas/Playlists'
  /getPlaylist:
    get:
      tags:
        - Playlists
      operationId: getPlaylist
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'ok'
          content:
            application/json:
              schema:
                required:
                  - subsonic-response
                properties:
                  subsonic-response:
                    allOf:
                      - $ref: '#/components/schemas/Response'
                      - type: object
                        required:
                          - playlist
                        properties:
                          playlist:
                            $ref: '#/components/schemas/PlaylistWithSongs'
  /getLyricsBySongId:
    get:
      tags:
        - Media Retrieval
      operationId: getLyricsBySongId
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'ok'
          content:
            application/json:
              schema:
                required:
                  - subsonic-response
                properties:
                  subsonic-response:
                    allOf:
                      - $ref: '#/components/schemas/Response'
                      - type: object
                        required:
                          - lyricsList
                        properties:
                          lyricsList:
                            $ref: '#/components/schemas/LyricsList'
  /star:
    post:
      tags:
        - Media Annotation
      operationId: star
      parameters:
        - name: id
          in: query
          required: false
          schema:
            type: string
        - name: albumId
          in: query
          required: false
          schema:
            type: string
        - name: artistId
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: 'ok'
          content:
            application/json:
              schema:
                required:
                  - subsonic-response
                properties:
                  subsonic-response:
                    $ref: '#/components/schemas/Response'
  /unstar:
    post:
      tags:
        - Media Annotation
      operationId: unstar
      parameters:
        - name: id
          in: query
          required: false
          schema:
            type: string
        - name: albumId
          in: query
          required: false
          schema:
            type: string
        - name: artistId
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: 'ok'
          content:
            application/json:
              schema:
                required:
                  - subsonic-response
                properties:
                  subsonic-response:
                    $ref: '#/components/schemas/Response'
  /scrobble:
    post:
      tags:
        - Media Annotation
      operationId: scrobble
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
        - name: time
          in: query
          required: false
          schema:
            type: integer
        - name: submission
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: 'ok'
          content:
            application/json:
              schema:
                required:
                  - subsonic-response
                properties:
                  subsonic-response:
                    $ref: '#/components/schemas/Response'
components:
  schemas:
    ResponseError:
      type: integer
      enum: [0, 10, 20, 30, 40, 41, 50, 60, 70]
    SubsonicResponse:
      type: object
      required:
        - subsonic-response
      properties:
        subsonic-response:
          $ref: '#/components/schemas/Response'
    Response:
      type: object
      required:
        - status
        - version
      properties:
        status:
          $ref: '#/components/schemas/ResponseStatus'
          xml:
            attribute: true
        version:
          $ref: '#/components/schemas/Version'
          xml:
            attribute: true
        type:
          type: string
        serverVersion:
          type: string
        openSubsonic:
          type: boolean
        error:
          $ref: '#/components/schemas/ResponseError'
      xml:
        name: subsonic-response
        namespace: http://subsonic.org/restapi
    ResponseStatus:
      type: string
      enum:
        - ok
        - failed
    Version:
      type: string
      pattern: '^\d+\.\d+\.\d+$'
    Genres:
      required:
        - genre
      type: object
      properties:
        genre:
          type: array
          items:
            $ref: '#/components/schemas/Genre'
    Genre:
      required:
        - value
        - songCount
        - albumCount
      type: object
      properties:
        value:
          type: string
        songCount:
          type: integer
        albumCount:
          type: integer
    ListType:
      type: string
      enum:
        - random
        - newest
        - highest
        - frequent
        - recent
        - alphabeticalByName
        - alphabeticalByArtist
        - starred
        - byYear
        - byGenre
    AlbumList:
      required:
        - album
      type: object
      properties:
        album:
          type: array
          items:
            $ref: '#/components/schemas/Album'
    Album:
      type: object
      $ref: '#/components/schemas/Child'
      xml:
        name: album
    AlbumWithSongsID3:
      allOf:
        - $ref: '#/components/schemas/AlbumID3'
        - type: object
          required:
            - song
          properties:
            song:
              type: array
              items:
                $ref: '#/components/schemas/Song'
    AlbumID3:
      required:
        - id
        - name
        - songCount
        - duration
        - created
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        artist:
          type: string
        artistId:
          type: string
        coverArt:
          type: string
        songCount:
          type: integer
        duration:
          type: integer
        playCount:
          type: integer
          format: long
        created:
          type: string
          format: date-time
        starred:
          type: string
          format: date-time
        year:
          type: integer
        genre:
          type: string
        played:
          type: string
          format: date-time
        userRating:
          type: integer
        musicBrainzId:
          type: string
        genres:
          type: array
          items:
            $ref: '#/components/schemas/ItemGenre'
        artists:
          type: array
          items:
            $ref: '#/components/schemas/ArtistID3'
        displayArtist:
          type: string
    Starred:
      type: object
      properties:
        artist:
          type: array
          items:
            $ref: '#/components/schemas/Artist'
        album:
          type: array
          items:
            $ref: '#/components/schemas/Album'
        song:
          type: array
          items:
            $ref: '#/components/schemas/Song'
    SearchResult:
      type: object
      properties:
        artist:
          type: array
          items:
            $ref: '#/components/schemas/Artist'
        album:
          type: array
          items:
            $ref: '#/components/schemas/Album'
        song:
          type: array
          items:
            $ref: '#/components/schemas/Song'
    SearchResultID3:
      type: object
      properties:
        artist:
          type: array
          items:
            $ref: '#/components/schemas/ArtistID3'
        album:
          type: array
          items:
            $ref: '#/components/schemas/AlbumID3'
        song:
          type: array
          items:
            $ref: '#/components/schemas/Song'
    Playlists:
      required:
        - playlist
      type: object
      properties:
        playlist:
          type: array
          items:
            $ref: '#/components/schemas/Playlist'
    Playlist:
      required:
        - id
        - name
        - songCount
        - duration
        - created
        - changed
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        comment:
          type: string
        owner:
          type: string
        public:
          type: boolean
        songCount:
          type: integer
          format: long
        duration:
          type: integer
          format: long
        created:
          type: string
          format: date-time
        changed:
          type: string
          format: date-time
        coverArt:
          type: string
        allowedUser:
          type: array
          items:
            type: string
    PlaylistWithSongs:
      allOf:
        - $ref: '#/components/schemas/Playlist'
        - type: object
          required:
            - entry
          properties:
            entry:
              type: array
              items:
                $ref: '#/components/schemas/Song'
    ArtistsID3:
      required:
        - ignoredArticles
      type: object
      properties:
        ignoredArticles:
          type: string
        index:
          type: array
          items:
            $ref: '#/components/schemas/IndexID3'
    IndexID3:
      required:
        - name
      type: object
      properties:
        name:
          type: string
        artist:
          type: array
          items:
            $ref: '#/components/schemas/ArtistID3'
    Artist:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        artistImageUrl:
          type: string
        starred:
          type: string
          format: date-time
        userRating:
          type: integer
        averageRating:
          type: number
          format: double
        album:
          type: array
          items:
            $ref: '#/components/schemas/AlbumID3'
      xml:
        name: artist
    ArtistID3:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        coverArt:
          type: string
        artistImageUrl:
          type: string
        starred:
          type: string
          format: date-time
    Songs:
      required:
        - song
      type: object
      properties:
        song:
          type: array
          items:
            $ref: '#/components/schemas/Song'
    Song:
      type: object
      $ref: '#/components/schemas/Child'
      xml:
        name: song
    Child:
      required:
        - id
        - isDir
        - title
      type: object
      properties:
        id:
          type: string
        parent:
          type: string
        isDir:
          type: boolean
        title:
          type: string
        album:
          type: string
        artist:
          type: string
        track:
          type: integer
        year:
          type: integer
        genre:
          type: string
        coverArt:
          type: string
        size:
          type: integer
          format: long
        contentType:
          type: string
        suffix:
          type: string
        transcodedContentType:
          type: string
        transcodedSuffix:
          type: string
        duration:
          type: integer
        bitRate:
          type: integer
        bitDepth:
          type: integer
        sampleRate:
          type: integer
        channelCount:
          type: integer
        path:
          type: string
        isVideo:
          type: boolean
        userRating:
          type: integer
        averageRating:
          type: number
          format: double
        playCount:
          type: integer
          format: long
        discNumber:
          type: integer
        created:
          type: string
          format: date-time
        starred:
          type: string
          format: date-time
        albumId:
          type: string
        artistId:
          type: string
        type:
          type: string
          enum:
            - music
            - podcast
            - audiobook
            - video
        mediaType:
          type: string
          enum:
            - song
            - album
            - artist
        bookmarkPosition:
          type: integer
          format: long
        originalWidth:
          type: integer
        originalHeight:
          type: integer
        played:
          type: string
          format: date-time
        bpm:
          type: integer
        comment:
          type: string
        sortName:
          type: string
        musicBrainzId:
          type: string
        genres:
          type: array
          items:
            $ref: '#/components/schemas/ItemGenre'
        artists:
          type: array
          items:
            $ref: '#/components/schemas/ArtistID3'
        displayArtist:
          type: string
        albumArtists:
          type: array
          items:
            $ref: '#/components/schemas/ArtistID3'
        displayAlbumArtist:
          type: string
    ItemGenre:
      required:
        - name
      type: object
      properties:
        name:
          type: string
    LyricsList:
      type: object
      properties:
        structuredLyrics:
          type: array
          items:
            $ref: '#/components/schemas/StructuredLyrics'
    StructuredLyrics:
      required:
        - lang
        - synced
        - line
      type: object
      properties:
        lang:
          type: string
        synced:
          type: boolean
        line:
          type: array
          items:
            $ref: '#/components/schemas/LyricLine'
        displayArtist:
          type: string
        displayTitle:
          type: string
        offset:
          type: integer
          format: long
    LyricLine:
      required:
        - value
      type: object
      properties:
        value:
          type: string
        start:
          type: integer
          format: long
