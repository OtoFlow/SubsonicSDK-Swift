// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// - Remark: HTTP `POST /ping.view`.
    /// - Remark: Generated from `#/paths//ping.view/post(signIn)`.
    func signIn(_ input: Operations.signIn.Input) async throws -> Operations.signIn.Output
    /// - Remark: HTTP `GET /ping`.
    /// - Remark: Generated from `#/paths//ping/get(ping)`.
    func ping(_ input: Operations.ping.Input) async throws -> Operations.ping.Output
    /// - Remark: HTTP `GET /getGenres`.
    /// - Remark: Generated from `#/paths//getGenres/get(getGenres)`.
    func getGenres(_ input: Operations.getGenres.Input) async throws -> Operations.getGenres.Output
    /// - Remark: HTTP `GET /getArtists`.
    /// - Remark: Generated from `#/paths//getArtists/get(getArtists)`.
    func getArtists(_ input: Operations.getArtists.Input) async throws -> Operations.getArtists.Output
    /// - Remark: HTTP `GET /getArtist`.
    /// - Remark: Generated from `#/paths//getArtist/get(getArtist)`.
    func getArtist(_ input: Operations.getArtist.Input) async throws -> Operations.getArtist.Output
    /// - Remark: HTTP `GET /getAlbum`.
    /// - Remark: Generated from `#/paths//getAlbum/get(getAlbum)`.
    func getAlbum(_ input: Operations.getAlbum.Input) async throws -> Operations.getAlbum.Output
    /// - Remark: HTTP `GET /getAlbumList`.
    /// - Remark: Generated from `#/paths//getAlbumList/get(getAlbumList)`.
    func getAlbumList(_ input: Operations.getAlbumList.Input) async throws -> Operations.getAlbumList.Output
    /// - Remark: HTTP `GET /getRandomSongs`.
    /// - Remark: Generated from `#/paths//getRandomSongs/get(getRandomSongs)`.
    func getRandomSongs(_ input: Operations.getRandomSongs.Input) async throws -> Operations.getRandomSongs.Output
    /// - Remark: HTTP `GET /getSongsByGenre`.
    /// - Remark: Generated from `#/paths//getSongsByGenre/get(getSongsByGenre)`.
    func getSongsByGenre(_ input: Operations.getSongsByGenre.Input) async throws -> Operations.getSongsByGenre.Output
    /// - Remark: HTTP `GET /getStarred`.
    /// - Remark: Generated from `#/paths//getStarred/get(getStarred)`.
    func getStarred(_ input: Operations.getStarred.Input) async throws -> Operations.getStarred.Output
    /// - Remark: HTTP `GET /search2`.
    /// - Remark: Generated from `#/paths//search2/get(search)`.
    func search(_ input: Operations.search.Input) async throws -> Operations.search.Output
    /// - Remark: HTTP `GET /search3`.
    /// - Remark: Generated from `#/paths//search3/get(searchID3)`.
    func searchID3(_ input: Operations.searchID3.Input) async throws -> Operations.searchID3.Output
    /// - Remark: HTTP `GET /getPlaylists`.
    /// - Remark: Generated from `#/paths//getPlaylists/get(getPlaylists)`.
    func getPlaylists(_ input: Operations.getPlaylists.Input) async throws -> Operations.getPlaylists.Output
    /// - Remark: HTTP `GET /getPlaylist`.
    /// - Remark: Generated from `#/paths//getPlaylist/get(getPlaylist)`.
    func getPlaylist(_ input: Operations.getPlaylist.Input) async throws -> Operations.getPlaylist.Output
    /// - Remark: HTTP `GET /getLyricsBySongId`.
    /// - Remark: Generated from `#/paths//getLyricsBySongId/get(getLyricsBySongId)`.
    func getLyricsBySongId(_ input: Operations.getLyricsBySongId.Input) async throws -> Operations.getLyricsBySongId.Output
    /// - Remark: HTTP `POST /star`.
    /// - Remark: Generated from `#/paths//star/post(star)`.
    func star(_ input: Operations.star.Input) async throws -> Operations.star.Output
    /// - Remark: HTTP `POST /unstar`.
    /// - Remark: Generated from `#/paths//unstar/post(unstar)`.
    func unstar(_ input: Operations.unstar.Input) async throws -> Operations.unstar.Output
    /// - Remark: HTTP `POST /scrobble`.
    /// - Remark: Generated from `#/paths//scrobble/post(scrobble)`.
    func scrobble(_ input: Operations.scrobble.Input) async throws -> Operations.scrobble.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// - Remark: HTTP `POST /ping.view`.
    /// - Remark: Generated from `#/paths//ping.view/post(signIn)`.
    public func signIn(
        query: Operations.signIn.Input.Query,
        headers: Operations.signIn.Input.Headers = .init()
    ) async throws -> Operations.signIn.Output {
        try await signIn(Operations.signIn.Input(
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `GET /ping`.
    /// - Remark: Generated from `#/paths//ping/get(ping)`.
    public func ping(headers: Operations.ping.Input.Headers = .init()) async throws -> Operations.ping.Output {
        try await ping(Operations.ping.Input(headers: headers))
    }
    /// - Remark: HTTP `GET /getGenres`.
    /// - Remark: Generated from `#/paths//getGenres/get(getGenres)`.
    public func getGenres(headers: Operations.getGenres.Input.Headers = .init()) async throws -> Operations.getGenres.Output {
        try await getGenres(Operations.getGenres.Input(headers: headers))
    }
    /// - Remark: HTTP `GET /getArtists`.
    /// - Remark: Generated from `#/paths//getArtists/get(getArtists)`.
    public func getArtists(
        query: Operations.getArtists.Input.Query = .init(),
        headers: Operations.getArtists.Input.Headers = .init()
    ) async throws -> Operations.getArtists.Output {
        try await getArtists(Operations.getArtists.Input(
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `GET /getArtist`.
    /// - Remark: Generated from `#/paths//getArtist/get(getArtist)`.
    public func getArtist(
        query: Operations.getArtist.Input.Query,
        headers: Operations.getArtist.Input.Headers = .init()
    ) async throws -> Operations.getArtist.Output {
        try await getArtist(Operations.getArtist.Input(
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `GET /getAlbum`.
    /// - Remark: Generated from `#/paths//getAlbum/get(getAlbum)`.
    public func getAlbum(
        query: Operations.getAlbum.Input.Query,
        headers: Operations.getAlbum.Input.Headers = .init()
    ) async throws -> Operations.getAlbum.Output {
        try await getAlbum(Operations.getAlbum.Input(
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `GET /getAlbumList`.
    /// - Remark: Generated from `#/paths//getAlbumList/get(getAlbumList)`.
    public func getAlbumList(
        query: Operations.getAlbumList.Input.Query,
        headers: Operations.getAlbumList.Input.Headers = .init()
    ) async throws -> Operations.getAlbumList.Output {
        try await getAlbumList(Operations.getAlbumList.Input(
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `GET /getRandomSongs`.
    /// - Remark: Generated from `#/paths//getRandomSongs/get(getRandomSongs)`.
    public func getRandomSongs(
        query: Operations.getRandomSongs.Input.Query = .init(),
        headers: Operations.getRandomSongs.Input.Headers = .init()
    ) async throws -> Operations.getRandomSongs.Output {
        try await getRandomSongs(Operations.getRandomSongs.Input(
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `GET /getSongsByGenre`.
    /// - Remark: Generated from `#/paths//getSongsByGenre/get(getSongsByGenre)`.
    public func getSongsByGenre(
        query: Operations.getSongsByGenre.Input.Query,
        headers: Operations.getSongsByGenre.Input.Headers = .init()
    ) async throws -> Operations.getSongsByGenre.Output {
        try await getSongsByGenre(Operations.getSongsByGenre.Input(
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `GET /getStarred`.
    /// - Remark: Generated from `#/paths//getStarred/get(getStarred)`.
    public func getStarred(
        query: Operations.getStarred.Input.Query = .init(),
        headers: Operations.getStarred.Input.Headers = .init()
    ) async throws -> Operations.getStarred.Output {
        try await getStarred(Operations.getStarred.Input(
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `GET /search2`.
    /// - Remark: Generated from `#/paths//search2/get(search)`.
    public func search(
        query: Operations.search.Input.Query,
        headers: Operations.search.Input.Headers = .init()
    ) async throws -> Operations.search.Output {
        try await search(Operations.search.Input(
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `GET /search3`.
    /// - Remark: Generated from `#/paths//search3/get(searchID3)`.
    public func searchID3(
        query: Operations.searchID3.Input.Query,
        headers: Operations.searchID3.Input.Headers = .init()
    ) async throws -> Operations.searchID3.Output {
        try await searchID3(Operations.searchID3.Input(
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `GET /getPlaylists`.
    /// - Remark: Generated from `#/paths//getPlaylists/get(getPlaylists)`.
    public func getPlaylists(
        query: Operations.getPlaylists.Input.Query = .init(),
        headers: Operations.getPlaylists.Input.Headers = .init()
    ) async throws -> Operations.getPlaylists.Output {
        try await getPlaylists(Operations.getPlaylists.Input(
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `GET /getPlaylist`.
    /// - Remark: Generated from `#/paths//getPlaylist/get(getPlaylist)`.
    public func getPlaylist(
        query: Operations.getPlaylist.Input.Query,
        headers: Operations.getPlaylist.Input.Headers = .init()
    ) async throws -> Operations.getPlaylist.Output {
        try await getPlaylist(Operations.getPlaylist.Input(
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `GET /getLyricsBySongId`.
    /// - Remark: Generated from `#/paths//getLyricsBySongId/get(getLyricsBySongId)`.
    public func getLyricsBySongId(
        query: Operations.getLyricsBySongId.Input.Query,
        headers: Operations.getLyricsBySongId.Input.Headers = .init()
    ) async throws -> Operations.getLyricsBySongId.Output {
        try await getLyricsBySongId(Operations.getLyricsBySongId.Input(
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `POST /star`.
    /// - Remark: Generated from `#/paths//star/post(star)`.
    public func star(
        query: Operations.star.Input.Query = .init(),
        headers: Operations.star.Input.Headers = .init()
    ) async throws -> Operations.star.Output {
        try await star(Operations.star.Input(
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `POST /unstar`.
    /// - Remark: Generated from `#/paths//unstar/post(unstar)`.
    public func unstar(
        query: Operations.unstar.Input.Query = .init(),
        headers: Operations.unstar.Input.Headers = .init()
    ) async throws -> Operations.unstar.Output {
        try await unstar(Operations.unstar.Input(
            query: query,
            headers: headers
        ))
    }
    /// - Remark: HTTP `POST /scrobble`.
    /// - Remark: Generated from `#/paths//scrobble/post(scrobble)`.
    public func scrobble(
        query: Operations.scrobble.Input.Query,
        headers: Operations.scrobble.Input.Headers = .init()
    ) async throws -> Operations.scrobble.Output {
        try await scrobble(Operations.scrobble.Input(
            query: query,
            headers: headers
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// - Remark: Generated from `#/components/schemas/ResponseError`.
        @frozen public enum ResponseError: Int, Codable, Hashable, Sendable, CaseIterable {
            case _0 = 0
            case _10 = 10
            case _20 = 20
            case _30 = 30
            case _40 = 40
            case _41 = 41
            case _50 = 50
            case _60 = 60
            case _70 = 70
        }
        /// - Remark: Generated from `#/components/schemas/SubsonicResponse`.
        public struct SubsonicResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SubsonicResponse/subsonic-response`.
            public var subsonic_hyphen_response: Components.Schemas.Response
            /// Creates a new `SubsonicResponse`.
            ///
            /// - Parameters:
            ///   - subsonic_hyphen_response:
            public init(subsonic_hyphen_response: Components.Schemas.Response) {
                self.subsonic_hyphen_response = subsonic_hyphen_response
            }
            public enum CodingKeys: String, CodingKey {
                case subsonic_hyphen_response = "subsonic-response"
            }
        }
        /// - Remark: Generated from `#/components/schemas/Response`.
        public struct Response: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Response/status`.
            public var status: Components.Schemas.ResponseStatus
            /// - Remark: Generated from `#/components/schemas/Response/version`.
            public var version: Components.Schemas.Version
            /// - Remark: Generated from `#/components/schemas/Response/type`.
            public var _type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Response/serverVersion`.
            public var serverVersion: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Response/openSubsonic`.
            public var openSubsonic: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Response/error`.
            public var error: Components.Schemas.ResponseError?
            /// Creates a new `Response`.
            ///
            /// - Parameters:
            ///   - status:
            ///   - version:
            ///   - _type:
            ///   - serverVersion:
            ///   - openSubsonic:
            ///   - error:
            public init(
                status: Components.Schemas.ResponseStatus,
                version: Components.Schemas.Version,
                _type: Swift.String? = nil,
                serverVersion: Swift.String? = nil,
                openSubsonic: Swift.Bool? = nil,
                error: Components.Schemas.ResponseError? = nil
            ) {
                self.status = status
                self.version = version
                self._type = _type
                self.serverVersion = serverVersion
                self.openSubsonic = openSubsonic
                self.error = error
            }
            public enum CodingKeys: String, CodingKey {
                case status
                case version
                case _type = "type"
                case serverVersion
                case openSubsonic
                case error
            }
        }
        /// - Remark: Generated from `#/components/schemas/ResponseStatus`.
        @frozen public enum ResponseStatus: String, Codable, Hashable, Sendable, CaseIterable {
            case ok = "ok"
            case failed = "failed"
        }
        /// - Remark: Generated from `#/components/schemas/Version`.
        public typealias Version = Swift.String
        /// - Remark: Generated from `#/components/schemas/Genres`.
        public struct Genres: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Genres/genre`.
            public var genre: [Components.Schemas.Genre]
            /// Creates a new `Genres`.
            ///
            /// - Parameters:
            ///   - genre:
            public init(genre: [Components.Schemas.Genre]) {
                self.genre = genre
            }
            public enum CodingKeys: String, CodingKey {
                case genre
            }
        }
        /// - Remark: Generated from `#/components/schemas/Genre`.
        public struct Genre: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Genre/value`.
            public var value: Swift.String
            /// - Remark: Generated from `#/components/schemas/Genre/songCount`.
            public var songCount: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Genre/albumCount`.
            public var albumCount: Swift.Int
            /// Creates a new `Genre`.
            ///
            /// - Parameters:
            ///   - value:
            ///   - songCount:
            ///   - albumCount:
            public init(
                value: Swift.String,
                songCount: Swift.Int,
                albumCount: Swift.Int
            ) {
                self.value = value
                self.songCount = songCount
                self.albumCount = albumCount
            }
            public enum CodingKeys: String, CodingKey {
                case value
                case songCount
                case albumCount
            }
        }
        /// - Remark: Generated from `#/components/schemas/ListType`.
        @frozen public enum ListType: String, Codable, Hashable, Sendable, CaseIterable {
            case random = "random"
            case newest = "newest"
            case highest = "highest"
            case frequent = "frequent"
            case recent = "recent"
            case alphabeticalByName = "alphabeticalByName"
            case alphabeticalByArtist = "alphabeticalByArtist"
            case starred = "starred"
            case byYear = "byYear"
            case byGenre = "byGenre"
        }
        /// - Remark: Generated from `#/components/schemas/AlbumList`.
        public struct AlbumList: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AlbumList/album`.
            public var album: [Components.Schemas.Album]
            /// Creates a new `AlbumList`.
            ///
            /// - Parameters:
            ///   - album:
            public init(album: [Components.Schemas.Album]) {
                self.album = album
            }
            public enum CodingKeys: String, CodingKey {
                case album
            }
        }
        /// - Remark: Generated from `#/components/schemas/Album`.
        public typealias Album = Components.Schemas.Child
        /// - Remark: Generated from `#/components/schemas/AlbumWithSongsID3`.
        public struct AlbumWithSongsID3: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AlbumWithSongsID3/value1`.
            public var value1: Components.Schemas.AlbumID3
            /// - Remark: Generated from `#/components/schemas/AlbumWithSongsID3/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/AlbumWithSongsID3/value2/song`.
                public var song: [Components.Schemas.Song]
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - song:
                public init(song: [Components.Schemas.Song]) {
                    self.song = song
                }
                public enum CodingKeys: String, CodingKey {
                    case song
                }
            }
            /// - Remark: Generated from `#/components/schemas/AlbumWithSongsID3/value2`.
            public var value2: Components.Schemas.AlbumWithSongsID3.Value2Payload
            /// Creates a new `AlbumWithSongsID3`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.AlbumID3,
                value2: Components.Schemas.AlbumWithSongsID3.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/AlbumID3`.
        public struct AlbumID3: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AlbumID3/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/AlbumID3/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/AlbumID3/artist`.
            public var artist: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AlbumID3/artistId`.
            public var artistId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AlbumID3/coverArt`.
            public var coverArt: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AlbumID3/songCount`.
            public var songCount: Swift.Int
            /// - Remark: Generated from `#/components/schemas/AlbumID3/duration`.
            public var duration: Swift.Int
            /// - Remark: Generated from `#/components/schemas/AlbumID3/playCount`.
            public var playCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/AlbumID3/created`.
            public var created: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/AlbumID3/starred`.
            public var starred: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/AlbumID3/year`.
            public var year: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/AlbumID3/genre`.
            public var genre: Swift.String?
            /// Creates a new `AlbumID3`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            ///   - artist:
            ///   - artistId:
            ///   - coverArt:
            ///   - songCount:
            ///   - duration:
            ///   - playCount:
            ///   - created:
            ///   - starred:
            ///   - year:
            ///   - genre:
            public init(
                id: Swift.String,
                name: Swift.String,
                artist: Swift.String? = nil,
                artistId: Swift.String? = nil,
                coverArt: Swift.String? = nil,
                songCount: Swift.Int,
                duration: Swift.Int,
                playCount: Swift.Int? = nil,
                created: Foundation.Date,
                starred: Foundation.Date? = nil,
                year: Swift.Int? = nil,
                genre: Swift.String? = nil
            ) {
                self.id = id
                self.name = name
                self.artist = artist
                self.artistId = artistId
                self.coverArt = coverArt
                self.songCount = songCount
                self.duration = duration
                self.playCount = playCount
                self.created = created
                self.starred = starred
                self.year = year
                self.genre = genre
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case artist
                case artistId
                case coverArt
                case songCount
                case duration
                case playCount
                case created
                case starred
                case year
                case genre
            }
        }
        /// - Remark: Generated from `#/components/schemas/Starred`.
        public struct Starred: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Starred/artist`.
            public var artist: [Components.Schemas.Artist]?
            /// - Remark: Generated from `#/components/schemas/Starred/album`.
            public var album: [Components.Schemas.Album]?
            /// - Remark: Generated from `#/components/schemas/Starred/song`.
            public var song: [Components.Schemas.Song]?
            /// Creates a new `Starred`.
            ///
            /// - Parameters:
            ///   - artist:
            ///   - album:
            ///   - song:
            public init(
                artist: [Components.Schemas.Artist]? = nil,
                album: [Components.Schemas.Album]? = nil,
                song: [Components.Schemas.Song]? = nil
            ) {
                self.artist = artist
                self.album = album
                self.song = song
            }
            public enum CodingKeys: String, CodingKey {
                case artist
                case album
                case song
            }
        }
        /// - Remark: Generated from `#/components/schemas/SearchResult`.
        public struct SearchResult: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SearchResult/artist`.
            public var artist: [Components.Schemas.Artist]?
            /// - Remark: Generated from `#/components/schemas/SearchResult/album`.
            public var album: [Components.Schemas.Album]?
            /// - Remark: Generated from `#/components/schemas/SearchResult/song`.
            public var song: [Components.Schemas.Song]?
            /// Creates a new `SearchResult`.
            ///
            /// - Parameters:
            ///   - artist:
            ///   - album:
            ///   - song:
            public init(
                artist: [Components.Schemas.Artist]? = nil,
                album: [Components.Schemas.Album]? = nil,
                song: [Components.Schemas.Song]? = nil
            ) {
                self.artist = artist
                self.album = album
                self.song = song
            }
            public enum CodingKeys: String, CodingKey {
                case artist
                case album
                case song
            }
        }
        /// - Remark: Generated from `#/components/schemas/SearchResultID3`.
        public struct SearchResultID3: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SearchResultID3/artist`.
            public var artist: [Components.Schemas.ArtistID3]?
            /// - Remark: Generated from `#/components/schemas/SearchResultID3/album`.
            public var album: [Components.Schemas.AlbumID3]?
            /// - Remark: Generated from `#/components/schemas/SearchResultID3/song`.
            public var song: [Components.Schemas.Song]?
            /// Creates a new `SearchResultID3`.
            ///
            /// - Parameters:
            ///   - artist:
            ///   - album:
            ///   - song:
            public init(
                artist: [Components.Schemas.ArtistID3]? = nil,
                album: [Components.Schemas.AlbumID3]? = nil,
                song: [Components.Schemas.Song]? = nil
            ) {
                self.artist = artist
                self.album = album
                self.song = song
            }
            public enum CodingKeys: String, CodingKey {
                case artist
                case album
                case song
            }
        }
        /// - Remark: Generated from `#/components/schemas/Playlists`.
        public struct Playlists: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Playlists/playlist`.
            public var playlist: [Components.Schemas.Playlist]
            /// Creates a new `Playlists`.
            ///
            /// - Parameters:
            ///   - playlist:
            public init(playlist: [Components.Schemas.Playlist]) {
                self.playlist = playlist
            }
            public enum CodingKeys: String, CodingKey {
                case playlist
            }
        }
        /// - Remark: Generated from `#/components/schemas/Playlist`.
        public struct Playlist: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Playlist/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/Playlist/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/Playlist/comment`.
            public var comment: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Playlist/owner`.
            public var owner: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Playlist/public`.
            public var _public: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Playlist/songCount`.
            public var songCount: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Playlist/duration`.
            public var duration: Swift.Int
            /// - Remark: Generated from `#/components/schemas/Playlist/created`.
            public var created: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/Playlist/changed`.
            public var changed: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/Playlist/coverArt`.
            public var coverArt: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Playlist/allowedUser`.
            public var allowedUser: [Swift.String]?
            /// Creates a new `Playlist`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            ///   - comment:
            ///   - owner:
            ///   - _public:
            ///   - songCount:
            ///   - duration:
            ///   - created:
            ///   - changed:
            ///   - coverArt:
            ///   - allowedUser:
            public init(
                id: Swift.String,
                name: Swift.String,
                comment: Swift.String? = nil,
                owner: Swift.String? = nil,
                _public: Swift.Bool? = nil,
                songCount: Swift.Int,
                duration: Swift.Int,
                created: Foundation.Date,
                changed: Foundation.Date,
                coverArt: Swift.String? = nil,
                allowedUser: [Swift.String]? = nil
            ) {
                self.id = id
                self.name = name
                self.comment = comment
                self.owner = owner
                self._public = _public
                self.songCount = songCount
                self.duration = duration
                self.created = created
                self.changed = changed
                self.coverArt = coverArt
                self.allowedUser = allowedUser
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case comment
                case owner
                case _public = "public"
                case songCount
                case duration
                case created
                case changed
                case coverArt
                case allowedUser
            }
        }
        /// - Remark: Generated from `#/components/schemas/PlaylistWithSongs`.
        public struct PlaylistWithSongs: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PlaylistWithSongs/value1`.
            public var value1: Components.Schemas.Playlist
            /// - Remark: Generated from `#/components/schemas/PlaylistWithSongs/value2`.
            public struct Value2Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/PlaylistWithSongs/value2/entry`.
                public var entry: [Components.Schemas.Song]
                /// Creates a new `Value2Payload`.
                ///
                /// - Parameters:
                ///   - entry:
                public init(entry: [Components.Schemas.Song]) {
                    self.entry = entry
                }
                public enum CodingKeys: String, CodingKey {
                    case entry
                }
            }
            /// - Remark: Generated from `#/components/schemas/PlaylistWithSongs/value2`.
            public var value2: Components.Schemas.PlaylistWithSongs.Value2Payload
            /// Creates a new `PlaylistWithSongs`.
            ///
            /// - Parameters:
            ///   - value1:
            ///   - value2:
            public init(
                value1: Components.Schemas.Playlist,
                value2: Components.Schemas.PlaylistWithSongs.Value2Payload
            ) {
                self.value1 = value1
                self.value2 = value2
            }
            public init(from decoder: any Decoder) throws {
                value1 = try .init(from: decoder)
                value2 = try .init(from: decoder)
            }
            public func encode(to encoder: any Encoder) throws {
                try value1.encode(to: encoder)
                try value2.encode(to: encoder)
            }
        }
        /// - Remark: Generated from `#/components/schemas/ArtistsID3`.
        public struct ArtistsID3: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ArtistsID3/ignoredArticles`.
            public var ignoredArticles: Swift.String
            /// - Remark: Generated from `#/components/schemas/ArtistsID3/index`.
            public var index: [Components.Schemas.IndexID3]?
            /// Creates a new `ArtistsID3`.
            ///
            /// - Parameters:
            ///   - ignoredArticles:
            ///   - index:
            public init(
                ignoredArticles: Swift.String,
                index: [Components.Schemas.IndexID3]? = nil
            ) {
                self.ignoredArticles = ignoredArticles
                self.index = index
            }
            public enum CodingKeys: String, CodingKey {
                case ignoredArticles
                case index
            }
        }
        /// - Remark: Generated from `#/components/schemas/IndexID3`.
        public struct IndexID3: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/IndexID3/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/IndexID3/artist`.
            public var artist: [Components.Schemas.ArtistID3]?
            /// Creates a new `IndexID3`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - artist:
            public init(
                name: Swift.String,
                artist: [Components.Schemas.ArtistID3]? = nil
            ) {
                self.name = name
                self.artist = artist
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case artist
            }
        }
        /// - Remark: Generated from `#/components/schemas/Artist`.
        public struct Artist: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Artist/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/Artist/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/Artist/artistImageUrl`.
            public var artistImageUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Artist/starred`.
            public var starred: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/Artist/userRating`.
            public var userRating: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Artist/averageRating`.
            public var averageRating: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/Artist/album`.
            public var album: [Components.Schemas.AlbumID3]?
            /// Creates a new `Artist`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            ///   - artistImageUrl:
            ///   - starred:
            ///   - userRating:
            ///   - averageRating:
            ///   - album:
            public init(
                id: Swift.String,
                name: Swift.String,
                artistImageUrl: Swift.String? = nil,
                starred: Foundation.Date? = nil,
                userRating: Swift.Int? = nil,
                averageRating: Swift.Double? = nil,
                album: [Components.Schemas.AlbumID3]? = nil
            ) {
                self.id = id
                self.name = name
                self.artistImageUrl = artistImageUrl
                self.starred = starred
                self.userRating = userRating
                self.averageRating = averageRating
                self.album = album
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case artistImageUrl
                case starred
                case userRating
                case averageRating
                case album
            }
        }
        /// - Remark: Generated from `#/components/schemas/ArtistID3`.
        public struct ArtistID3: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ArtistID3/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/ArtistID3/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/ArtistID3/coverArt`.
            public var coverArt: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ArtistID3/artistImageUrl`.
            public var artistImageUrl: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ArtistID3/starred`.
            public var starred: Foundation.Date?
            /// Creates a new `ArtistID3`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            ///   - coverArt:
            ///   - artistImageUrl:
            ///   - starred:
            public init(
                id: Swift.String,
                name: Swift.String,
                coverArt: Swift.String? = nil,
                artistImageUrl: Swift.String? = nil,
                starred: Foundation.Date? = nil
            ) {
                self.id = id
                self.name = name
                self.coverArt = coverArt
                self.artistImageUrl = artistImageUrl
                self.starred = starred
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case coverArt
                case artistImageUrl
                case starred
            }
        }
        /// - Remark: Generated from `#/components/schemas/Songs`.
        public struct Songs: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Songs/song`.
            public var song: [Components.Schemas.Song]
            /// Creates a new `Songs`.
            ///
            /// - Parameters:
            ///   - song:
            public init(song: [Components.Schemas.Song]) {
                self.song = song
            }
            public enum CodingKeys: String, CodingKey {
                case song
            }
        }
        /// - Remark: Generated from `#/components/schemas/Song`.
        public typealias Song = Components.Schemas.Child
        /// - Remark: Generated from `#/components/schemas/Child`.
        public struct Child: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Child/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/Child/parent`.
            public var parent: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Child/isDir`.
            public var isDir: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/Child/title`.
            public var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/Child/album`.
            public var album: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Child/artist`.
            public var artist: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Child/track`.
            public var track: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Child/year`.
            public var year: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Child/genre`.
            public var genre: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Child/coverArt`.
            public var coverArt: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Child/size`.
            public var size: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Child/contentType`.
            public var contentType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Child/suffix`.
            public var suffix: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Child/transcodedContentType`.
            public var transcodedContentType: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Child/transcodedSuffix`.
            public var transcodedSuffix: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Child/duration`.
            public var duration: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Child/bitRate`.
            public var bitRate: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Child/bitDepth`.
            public var bitDepth: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Child/sampleRate`.
            public var sampleRate: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Child/channelCount`.
            public var channelCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Child/path`.
            public var path: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Child/isVideo`.
            public var isVideo: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Child/userRating`.
            public var userRating: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Child/averageRating`.
            public var averageRating: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/Child/playCount`.
            public var playCount: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Child/discNumber`.
            public var discNumber: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Child/created`.
            public var created: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/Child/starred`.
            public var starred: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/Child/albumId`.
            public var albumId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Child/artistId`.
            public var artistId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Child/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case music = "music"
                case podcast = "podcast"
                case audiobook = "audiobook"
                case video = "video"
            }
            /// - Remark: Generated from `#/components/schemas/Child/type`.
            public var _type: Components.Schemas.Child._typePayload?
            /// - Remark: Generated from `#/components/schemas/Child/mediaType`.
            @frozen public enum mediaTypePayload: String, Codable, Hashable, Sendable, CaseIterable {
                case song = "song"
                case album = "album"
                case artist = "artist"
            }
            /// - Remark: Generated from `#/components/schemas/Child/mediaType`.
            public var mediaType: Components.Schemas.Child.mediaTypePayload?
            /// - Remark: Generated from `#/components/schemas/Child/bookmarkPosition`.
            public var bookmarkPosition: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Child/originalWidth`.
            public var originalWidth: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Child/originalHeight`.
            public var originalHeight: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Child/played`.
            public var played: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/Child/bpm`.
            public var bpm: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/Child/comment`.
            public var comment: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Child/sortName`.
            public var sortName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Child/musicBrainzId`.
            public var musicBrainzId: Swift.String?
            /// Creates a new `Child`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - parent:
            ///   - isDir:
            ///   - title:
            ///   - album:
            ///   - artist:
            ///   - track:
            ///   - year:
            ///   - genre:
            ///   - coverArt:
            ///   - size:
            ///   - contentType:
            ///   - suffix:
            ///   - transcodedContentType:
            ///   - transcodedSuffix:
            ///   - duration:
            ///   - bitRate:
            ///   - bitDepth:
            ///   - sampleRate:
            ///   - channelCount:
            ///   - path:
            ///   - isVideo:
            ///   - userRating:
            ///   - averageRating:
            ///   - playCount:
            ///   - discNumber:
            ///   - created:
            ///   - starred:
            ///   - albumId:
            ///   - artistId:
            ///   - _type:
            ///   - mediaType:
            ///   - bookmarkPosition:
            ///   - originalWidth:
            ///   - originalHeight:
            ///   - played:
            ///   - bpm:
            ///   - comment:
            ///   - sortName:
            ///   - musicBrainzId:
            public init(
                id: Swift.String,
                parent: Swift.String? = nil,
                isDir: Swift.Bool,
                title: Swift.String,
                album: Swift.String? = nil,
                artist: Swift.String? = nil,
                track: Swift.Int? = nil,
                year: Swift.Int? = nil,
                genre: Swift.String? = nil,
                coverArt: Swift.String? = nil,
                size: Swift.Int? = nil,
                contentType: Swift.String? = nil,
                suffix: Swift.String? = nil,
                transcodedContentType: Swift.String? = nil,
                transcodedSuffix: Swift.String? = nil,
                duration: Swift.Int? = nil,
                bitRate: Swift.Int? = nil,
                bitDepth: Swift.Int? = nil,
                sampleRate: Swift.Int? = nil,
                channelCount: Swift.Int? = nil,
                path: Swift.String? = nil,
                isVideo: Swift.Bool? = nil,
                userRating: Swift.Int? = nil,
                averageRating: Swift.Double? = nil,
                playCount: Swift.Int? = nil,
                discNumber: Swift.Int? = nil,
                created: Foundation.Date? = nil,
                starred: Foundation.Date? = nil,
                albumId: Swift.String? = nil,
                artistId: Swift.String? = nil,
                _type: Components.Schemas.Child._typePayload? = nil,
                mediaType: Components.Schemas.Child.mediaTypePayload? = nil,
                bookmarkPosition: Swift.Int? = nil,
                originalWidth: Swift.Int? = nil,
                originalHeight: Swift.Int? = nil,
                played: Foundation.Date? = nil,
                bpm: Swift.Int? = nil,
                comment: Swift.String? = nil,
                sortName: Swift.String? = nil,
                musicBrainzId: Swift.String? = nil
            ) {
                self.id = id
                self.parent = parent
                self.isDir = isDir
                self.title = title
                self.album = album
                self.artist = artist
                self.track = track
                self.year = year
                self.genre = genre
                self.coverArt = coverArt
                self.size = size
                self.contentType = contentType
                self.suffix = suffix
                self.transcodedContentType = transcodedContentType
                self.transcodedSuffix = transcodedSuffix
                self.duration = duration
                self.bitRate = bitRate
                self.bitDepth = bitDepth
                self.sampleRate = sampleRate
                self.channelCount = channelCount
                self.path = path
                self.isVideo = isVideo
                self.userRating = userRating
                self.averageRating = averageRating
                self.playCount = playCount
                self.discNumber = discNumber
                self.created = created
                self.starred = starred
                self.albumId = albumId
                self.artistId = artistId
                self._type = _type
                self.mediaType = mediaType
                self.bookmarkPosition = bookmarkPosition
                self.originalWidth = originalWidth
                self.originalHeight = originalHeight
                self.played = played
                self.bpm = bpm
                self.comment = comment
                self.sortName = sortName
                self.musicBrainzId = musicBrainzId
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case parent
                case isDir
                case title
                case album
                case artist
                case track
                case year
                case genre
                case coverArt
                case size
                case contentType
                case suffix
                case transcodedContentType
                case transcodedSuffix
                case duration
                case bitRate
                case bitDepth
                case sampleRate
                case channelCount
                case path
                case isVideo
                case userRating
                case averageRating
                case playCount
                case discNumber
                case created
                case starred
                case albumId
                case artistId
                case _type = "type"
                case mediaType
                case bookmarkPosition
                case originalWidth
                case originalHeight
                case played
                case bpm
                case comment
                case sortName
                case musicBrainzId
            }
        }
        /// - Remark: Generated from `#/components/schemas/LyricsList`.
        public struct LyricsList: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/LyricsList/structuredLyrics`.
            public var structuredLyrics: [Components.Schemas.StructuredLyrics]?
            /// Creates a new `LyricsList`.
            ///
            /// - Parameters:
            ///   - structuredLyrics:
            public init(structuredLyrics: [Components.Schemas.StructuredLyrics]? = nil) {
                self.structuredLyrics = structuredLyrics
            }
            public enum CodingKeys: String, CodingKey {
                case structuredLyrics
            }
        }
        /// - Remark: Generated from `#/components/schemas/StructuredLyrics`.
        public struct StructuredLyrics: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/StructuredLyrics/lang`.
            public var lang: Swift.String
            /// - Remark: Generated from `#/components/schemas/StructuredLyrics/synced`.
            public var synced: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/StructuredLyrics/line`.
            public var line: [Components.Schemas.LyricLine]
            /// - Remark: Generated from `#/components/schemas/StructuredLyrics/displayArtist`.
            public var displayArtist: Swift.String?
            /// - Remark: Generated from `#/components/schemas/StructuredLyrics/displayTitle`.
            public var displayTitle: Swift.String?
            /// - Remark: Generated from `#/components/schemas/StructuredLyrics/offset`.
            public var offset: Swift.Int?
            /// Creates a new `StructuredLyrics`.
            ///
            /// - Parameters:
            ///   - lang:
            ///   - synced:
            ///   - line:
            ///   - displayArtist:
            ///   - displayTitle:
            ///   - offset:
            public init(
                lang: Swift.String,
                synced: Swift.Bool,
                line: [Components.Schemas.LyricLine],
                displayArtist: Swift.String? = nil,
                displayTitle: Swift.String? = nil,
                offset: Swift.Int? = nil
            ) {
                self.lang = lang
                self.synced = synced
                self.line = line
                self.displayArtist = displayArtist
                self.displayTitle = displayTitle
                self.offset = offset
            }
            public enum CodingKeys: String, CodingKey {
                case lang
                case synced
                case line
                case displayArtist
                case displayTitle
                case offset
            }
        }
        /// - Remark: Generated from `#/components/schemas/LyricLine`.
        public struct LyricLine: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/LyricLine/value`.
            public var value: Swift.String
            /// - Remark: Generated from `#/components/schemas/LyricLine/start`.
            public var start: Swift.Int?
            /// Creates a new `LyricLine`.
            ///
            /// - Parameters:
            ///   - value:
            ///   - start:
            public init(
                value: Swift.String,
                start: Swift.Int? = nil
            ) {
                self.value = value
                self.start = start
            }
            public enum CodingKeys: String, CodingKey {
                case value
                case start
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// - Remark: HTTP `POST /ping.view`.
    /// - Remark: Generated from `#/paths//ping.view/post(signIn)`.
    public enum signIn {
        public static let id: Swift.String = "signIn"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/ping.view/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/ping.view/POST/query/u`.
                public var u: Swift.String
                /// - Remark: Generated from `#/paths/ping.view/POST/query/t`.
                public var t: Swift.String
                /// - Remark: Generated from `#/paths/ping.view/POST/query/s`.
                public var s: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - u:
                ///   - t:
                ///   - s:
                public init(
                    u: Swift.String,
                    t: Swift.String,
                    s: Swift.String
                ) {
                    self.u = u
                    self.t = t
                    self.s = s
                }
            }
            public var query: Operations.signIn.Input.Query
            /// - Remark: Generated from `#/paths/ping.view/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.signIn.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.signIn.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.signIn.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.signIn.Input.Query,
                headers: Operations.signIn.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/ping.view/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/ping.view/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/ping.view/POST/responses/200/content/json/subsonic-response`.
                        public var subsonic_hyphen_response: Components.Schemas.Response
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - subsonic_hyphen_response:
                        public init(subsonic_hyphen_response: Components.Schemas.Response) {
                            self.subsonic_hyphen_response = subsonic_hyphen_response
                        }
                        public enum CodingKeys: String, CodingKey {
                            case subsonic_hyphen_response = "subsonic-response"
                        }
                    }
                    /// - Remark: Generated from `#/paths/ping.view/POST/responses/200/content/application\/json`.
                    case json(Operations.signIn.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.signIn.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/json",
                                    body: self
                                )
                            }
                        }
                    }
                    /// - Remark: Generated from `#/paths/ping.view/POST/responses/200/content/application\/xml`.
                    case xml(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.xml`.
                    ///
                    /// - Throws: An error if `self` is not `.xml`.
                    /// - SeeAlso: `.xml`.
                    public var xml: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .xml(body):
                                return body
                            default:
                                try throwUnexpectedResponseBody(
                                    expectedContent: "application/xml",
                                    body: self
                                )
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.signIn.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.signIn.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ok
            ///
            /// - Remark: Generated from `#/paths//ping.view/post(signIn)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.signIn.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.signIn.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case xml
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                case "application/xml":
                    self = .xml
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                case .xml:
                    return "application/xml"
                }
            }
            public static var allCases: [Self] {
                [
                    .json,
                    .xml
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /ping`.
    /// - Remark: Generated from `#/paths//ping/get(ping)`.
    public enum ping {
        public static let id: Swift.String = "ping"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/ping/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ping.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.ping.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.ping.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.ping.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/ping/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/ping/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/ping/GET/responses/200/content/json/subsonic-response`.
                        public var subsonic_hyphen_response: Components.Schemas.Response
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - subsonic_hyphen_response:
                        public init(subsonic_hyphen_response: Components.Schemas.Response) {
                            self.subsonic_hyphen_response = subsonic_hyphen_response
                        }
                        public enum CodingKeys: String, CodingKey {
                            case subsonic_hyphen_response = "subsonic-response"
                        }
                    }
                    /// - Remark: Generated from `#/paths/ping/GET/responses/200/content/application\/json`.
                    case json(Operations.ping.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.ping.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.ping.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.ping.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ok
            ///
            /// - Remark: Generated from `#/paths//ping/get(ping)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.ping.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.ping.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /getGenres`.
    /// - Remark: Generated from `#/paths//getGenres/get(getGenres)`.
    public enum getGenres {
        public static let id: Swift.String = "getGenres"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getGenres/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getGenres.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getGenres.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getGenres.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.getGenres.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getGenres/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getGenres/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getGenres/GET/responses/200/content/json/subsonic-response`.
                        public struct subsonic_hyphen_responsePayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/getGenres/GET/responses/200/content/json/subsonic-response/value1`.
                            public var value1: Components.Schemas.Response
                            /// - Remark: Generated from `#/paths/getGenres/GET/responses/200/content/json/subsonic-response/value2`.
                            public struct Value2Payload: Codable, Hashable, Sendable {
                                /// - Remark: Generated from `#/paths/getGenres/GET/responses/200/content/json/subsonic-response/value2/genres`.
                                public var genres: Components.Schemas.Genres
                                /// Creates a new `Value2Payload`.
                                ///
                                /// - Parameters:
                                ///   - genres:
                                public init(genres: Components.Schemas.Genres) {
                                    self.genres = genres
                                }
                                public enum CodingKeys: String, CodingKey {
                                    case genres
                                }
                            }
                            /// - Remark: Generated from `#/paths/getGenres/GET/responses/200/content/json/subsonic-response/value2`.
                            public var value2: Operations.getGenres.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload.Value2Payload
                            /// Creates a new `subsonic_hyphen_responsePayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.Response,
                                value2: Operations.getGenres.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload.Value2Payload
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                value1 = try .init(from: decoder)
                                value2 = try .init(from: decoder)
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try value1.encode(to: encoder)
                                try value2.encode(to: encoder)
                            }
                        }
                        /// - Remark: Generated from `#/paths/getGenres/GET/responses/200/content/json/subsonic-response`.
                        public var subsonic_hyphen_response: Operations.getGenres.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - subsonic_hyphen_response:
                        public init(subsonic_hyphen_response: Operations.getGenres.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload) {
                            self.subsonic_hyphen_response = subsonic_hyphen_response
                        }
                        public enum CodingKeys: String, CodingKey {
                            case subsonic_hyphen_response = "subsonic-response"
                        }
                    }
                    /// - Remark: Generated from `#/paths/getGenres/GET/responses/200/content/application\/json`.
                    case json(Operations.getGenres.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getGenres.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getGenres.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getGenres.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ok
            ///
            /// - Remark: Generated from `#/paths//getGenres/get(getGenres)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getGenres.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getGenres.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /getArtists`.
    /// - Remark: Generated from `#/paths//getArtists/get(getArtists)`.
    public enum getArtists {
        public static let id: Swift.String = "getArtists"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getArtists/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getArtists/GET/query/musicFolderId`.
                public var musicFolderId: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - musicFolderId:
                public init(musicFolderId: Swift.Int? = nil) {
                    self.musicFolderId = musicFolderId
                }
            }
            public var query: Operations.getArtists.Input.Query
            /// - Remark: Generated from `#/paths/getArtists/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getArtists.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getArtists.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getArtists.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.getArtists.Input.Query = .init(),
                headers: Operations.getArtists.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getArtists/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getArtists/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getArtists/GET/responses/200/content/json/subsonic-response`.
                        public struct subsonic_hyphen_responsePayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/getArtists/GET/responses/200/content/json/subsonic-response/value1`.
                            public var value1: Components.Schemas.Response
                            /// - Remark: Generated from `#/paths/getArtists/GET/responses/200/content/json/subsonic-response/value2`.
                            public struct Value2Payload: Codable, Hashable, Sendable {
                                /// - Remark: Generated from `#/paths/getArtists/GET/responses/200/content/json/subsonic-response/value2/artists`.
                                public var artists: Components.Schemas.ArtistsID3
                                /// Creates a new `Value2Payload`.
                                ///
                                /// - Parameters:
                                ///   - artists:
                                public init(artists: Components.Schemas.ArtistsID3) {
                                    self.artists = artists
                                }
                                public enum CodingKeys: String, CodingKey {
                                    case artists
                                }
                            }
                            /// - Remark: Generated from `#/paths/getArtists/GET/responses/200/content/json/subsonic-response/value2`.
                            public var value2: Operations.getArtists.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload.Value2Payload
                            /// Creates a new `subsonic_hyphen_responsePayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.Response,
                                value2: Operations.getArtists.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload.Value2Payload
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                value1 = try .init(from: decoder)
                                value2 = try .init(from: decoder)
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try value1.encode(to: encoder)
                                try value2.encode(to: encoder)
                            }
                        }
                        /// - Remark: Generated from `#/paths/getArtists/GET/responses/200/content/json/subsonic-response`.
                        public var subsonic_hyphen_response: Operations.getArtists.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - subsonic_hyphen_response:
                        public init(subsonic_hyphen_response: Operations.getArtists.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload) {
                            self.subsonic_hyphen_response = subsonic_hyphen_response
                        }
                        public enum CodingKeys: String, CodingKey {
                            case subsonic_hyphen_response = "subsonic-response"
                        }
                    }
                    /// - Remark: Generated from `#/paths/getArtists/GET/responses/200/content/application\/json`.
                    case json(Operations.getArtists.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getArtists.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getArtists.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getArtists.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ok
            ///
            /// - Remark: Generated from `#/paths//getArtists/get(getArtists)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getArtists.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getArtists.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /getArtist`.
    /// - Remark: Generated from `#/paths//getArtist/get(getArtist)`.
    public enum getArtist {
        public static let id: Swift.String = "getArtist"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getArtist/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getArtist/GET/query/id`.
                public var id: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.String) {
                    self.id = id
                }
            }
            public var query: Operations.getArtist.Input.Query
            /// - Remark: Generated from `#/paths/getArtist/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getArtist.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getArtist.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getArtist.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.getArtist.Input.Query,
                headers: Operations.getArtist.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getArtist/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getArtist/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getArtist/GET/responses/200/content/json/subsonic-response`.
                        public struct subsonic_hyphen_responsePayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/getArtist/GET/responses/200/content/json/subsonic-response/value1`.
                            public var value1: Components.Schemas.Response
                            /// - Remark: Generated from `#/paths/getArtist/GET/responses/200/content/json/subsonic-response/value2`.
                            public struct Value2Payload: Codable, Hashable, Sendable {
                                /// - Remark: Generated from `#/paths/getArtist/GET/responses/200/content/json/subsonic-response/value2/artist`.
                                public var artist: Components.Schemas.Artist
                                /// Creates a new `Value2Payload`.
                                ///
                                /// - Parameters:
                                ///   - artist:
                                public init(artist: Components.Schemas.Artist) {
                                    self.artist = artist
                                }
                                public enum CodingKeys: String, CodingKey {
                                    case artist
                                }
                            }
                            /// - Remark: Generated from `#/paths/getArtist/GET/responses/200/content/json/subsonic-response/value2`.
                            public var value2: Operations.getArtist.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload.Value2Payload
                            /// Creates a new `subsonic_hyphen_responsePayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.Response,
                                value2: Operations.getArtist.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload.Value2Payload
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                value1 = try .init(from: decoder)
                                value2 = try .init(from: decoder)
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try value1.encode(to: encoder)
                                try value2.encode(to: encoder)
                            }
                        }
                        /// - Remark: Generated from `#/paths/getArtist/GET/responses/200/content/json/subsonic-response`.
                        public var subsonic_hyphen_response: Operations.getArtist.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - subsonic_hyphen_response:
                        public init(subsonic_hyphen_response: Operations.getArtist.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload) {
                            self.subsonic_hyphen_response = subsonic_hyphen_response
                        }
                        public enum CodingKeys: String, CodingKey {
                            case subsonic_hyphen_response = "subsonic-response"
                        }
                    }
                    /// - Remark: Generated from `#/paths/getArtist/GET/responses/200/content/application\/json`.
                    case json(Operations.getArtist.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getArtist.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getArtist.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getArtist.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ok
            ///
            /// - Remark: Generated from `#/paths//getArtist/get(getArtist)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getArtist.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getArtist.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /getAlbum`.
    /// - Remark: Generated from `#/paths//getAlbum/get(getAlbum)`.
    public enum getAlbum {
        public static let id: Swift.String = "getAlbum"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getAlbum/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getAlbum/GET/query/id`.
                public var id: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.String) {
                    self.id = id
                }
            }
            public var query: Operations.getAlbum.Input.Query
            /// - Remark: Generated from `#/paths/getAlbum/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAlbum.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAlbum.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getAlbum.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.getAlbum.Input.Query,
                headers: Operations.getAlbum.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getAlbum/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getAlbum/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getAlbum/GET/responses/200/content/json/subsonic-response`.
                        public struct subsonic_hyphen_responsePayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/getAlbum/GET/responses/200/content/json/subsonic-response/value1`.
                            public var value1: Components.Schemas.Response
                            /// - Remark: Generated from `#/paths/getAlbum/GET/responses/200/content/json/subsonic-response/value2`.
                            public struct Value2Payload: Codable, Hashable, Sendable {
                                /// - Remark: Generated from `#/paths/getAlbum/GET/responses/200/content/json/subsonic-response/value2/album`.
                                public var album: Components.Schemas.AlbumWithSongsID3
                                /// Creates a new `Value2Payload`.
                                ///
                                /// - Parameters:
                                ///   - album:
                                public init(album: Components.Schemas.AlbumWithSongsID3) {
                                    self.album = album
                                }
                                public enum CodingKeys: String, CodingKey {
                                    case album
                                }
                            }
                            /// - Remark: Generated from `#/paths/getAlbum/GET/responses/200/content/json/subsonic-response/value2`.
                            public var value2: Operations.getAlbum.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload.Value2Payload
                            /// Creates a new `subsonic_hyphen_responsePayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.Response,
                                value2: Operations.getAlbum.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload.Value2Payload
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                value1 = try .init(from: decoder)
                                value2 = try .init(from: decoder)
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try value1.encode(to: encoder)
                                try value2.encode(to: encoder)
                            }
                        }
                        /// - Remark: Generated from `#/paths/getAlbum/GET/responses/200/content/json/subsonic-response`.
                        public var subsonic_hyphen_response: Operations.getAlbum.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - subsonic_hyphen_response:
                        public init(subsonic_hyphen_response: Operations.getAlbum.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload) {
                            self.subsonic_hyphen_response = subsonic_hyphen_response
                        }
                        public enum CodingKeys: String, CodingKey {
                            case subsonic_hyphen_response = "subsonic-response"
                        }
                    }
                    /// - Remark: Generated from `#/paths/getAlbum/GET/responses/200/content/application\/json`.
                    case json(Operations.getAlbum.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getAlbum.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAlbum.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAlbum.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ok
            ///
            /// - Remark: Generated from `#/paths//getAlbum/get(getAlbum)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getAlbum.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getAlbum.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /getAlbumList`.
    /// - Remark: Generated from `#/paths//getAlbumList/get(getAlbumList)`.
    public enum getAlbumList {
        public static let id: Swift.String = "getAlbumList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getAlbumList/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getAlbumList/GET/query/type`.
                public var _type: Components.Schemas.ListType
                /// - Remark: Generated from `#/paths/getAlbumList/GET/query/size`.
                public var size: Swift.Int?
                /// - Remark: Generated from `#/paths/getAlbumList/GET/query/offset`.
                public var offset: Swift.Int?
                /// - Remark: Generated from `#/paths/getAlbumList/GET/query/fromYear`.
                public var fromYear: Swift.Int?
                /// - Remark: Generated from `#/paths/getAlbumList/GET/query/toYear`.
                public var toYear: Swift.Int?
                /// - Remark: Generated from `#/paths/getAlbumList/GET/query/genre`.
                public var genre: Swift.String?
                /// - Remark: Generated from `#/paths/getAlbumList/GET/query/musicFolderId`.
                public var musicFolderId: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - size:
                ///   - offset:
                ///   - fromYear:
                ///   - toYear:
                ///   - genre:
                ///   - musicFolderId:
                public init(
                    _type: Components.Schemas.ListType,
                    size: Swift.Int? = nil,
                    offset: Swift.Int? = nil,
                    fromYear: Swift.Int? = nil,
                    toYear: Swift.Int? = nil,
                    genre: Swift.String? = nil,
                    musicFolderId: Swift.Int? = nil
                ) {
                    self._type = _type
                    self.size = size
                    self.offset = offset
                    self.fromYear = fromYear
                    self.toYear = toYear
                    self.genre = genre
                    self.musicFolderId = musicFolderId
                }
            }
            public var query: Operations.getAlbumList.Input.Query
            /// - Remark: Generated from `#/paths/getAlbumList/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAlbumList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAlbumList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getAlbumList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.getAlbumList.Input.Query,
                headers: Operations.getAlbumList.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getAlbumList/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getAlbumList/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getAlbumList/GET/responses/200/content/json/subsonic-response`.
                        public struct subsonic_hyphen_responsePayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/getAlbumList/GET/responses/200/content/json/subsonic-response/value1`.
                            public var value1: Components.Schemas.Response
                            /// - Remark: Generated from `#/paths/getAlbumList/GET/responses/200/content/json/subsonic-response/value2`.
                            public struct Value2Payload: Codable, Hashable, Sendable {
                                /// - Remark: Generated from `#/paths/getAlbumList/GET/responses/200/content/json/subsonic-response/value2/albumList`.
                                public var albumList: Components.Schemas.AlbumList
                                /// Creates a new `Value2Payload`.
                                ///
                                /// - Parameters:
                                ///   - albumList:
                                public init(albumList: Components.Schemas.AlbumList) {
                                    self.albumList = albumList
                                }
                                public enum CodingKeys: String, CodingKey {
                                    case albumList
                                }
                            }
                            /// - Remark: Generated from `#/paths/getAlbumList/GET/responses/200/content/json/subsonic-response/value2`.
                            public var value2: Operations.getAlbumList.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload.Value2Payload
                            /// Creates a new `subsonic_hyphen_responsePayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.Response,
                                value2: Operations.getAlbumList.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload.Value2Payload
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                value1 = try .init(from: decoder)
                                value2 = try .init(from: decoder)
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try value1.encode(to: encoder)
                                try value2.encode(to: encoder)
                            }
                        }
                        /// - Remark: Generated from `#/paths/getAlbumList/GET/responses/200/content/json/subsonic-response`.
                        public var subsonic_hyphen_response: Operations.getAlbumList.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - subsonic_hyphen_response:
                        public init(subsonic_hyphen_response: Operations.getAlbumList.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload) {
                            self.subsonic_hyphen_response = subsonic_hyphen_response
                        }
                        public enum CodingKeys: String, CodingKey {
                            case subsonic_hyphen_response = "subsonic-response"
                        }
                    }
                    /// - Remark: Generated from `#/paths/getAlbumList/GET/responses/200/content/application\/json`.
                    case json(Operations.getAlbumList.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getAlbumList.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAlbumList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAlbumList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ok
            ///
            /// - Remark: Generated from `#/paths//getAlbumList/get(getAlbumList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getAlbumList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getAlbumList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /getRandomSongs`.
    /// - Remark: Generated from `#/paths//getRandomSongs/get(getRandomSongs)`.
    public enum getRandomSongs {
        public static let id: Swift.String = "getRandomSongs"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getRandomSongs/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getRandomSongs/GET/query/size`.
                public var size: Swift.Int?
                /// - Remark: Generated from `#/paths/getRandomSongs/GET/query/genre`.
                public var genre: Swift.String?
                /// - Remark: Generated from `#/paths/getRandomSongs/GET/query/fromYear`.
                public var fromYear: Foundation.Date?
                /// - Remark: Generated from `#/paths/getRandomSongs/GET/query/toYear`.
                public var toYear: Foundation.Date?
                /// - Remark: Generated from `#/paths/getRandomSongs/GET/query/musicFolderId`.
                public var musicFolderId: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - size:
                ///   - genre:
                ///   - fromYear:
                ///   - toYear:
                ///   - musicFolderId:
                public init(
                    size: Swift.Int? = nil,
                    genre: Swift.String? = nil,
                    fromYear: Foundation.Date? = nil,
                    toYear: Foundation.Date? = nil,
                    musicFolderId: Swift.Int? = nil
                ) {
                    self.size = size
                    self.genre = genre
                    self.fromYear = fromYear
                    self.toYear = toYear
                    self.musicFolderId = musicFolderId
                }
            }
            public var query: Operations.getRandomSongs.Input.Query
            /// - Remark: Generated from `#/paths/getRandomSongs/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getRandomSongs.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getRandomSongs.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getRandomSongs.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.getRandomSongs.Input.Query = .init(),
                headers: Operations.getRandomSongs.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getRandomSongs/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getRandomSongs/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getRandomSongs/GET/responses/200/content/json/subsonic-response`.
                        public struct subsonic_hyphen_responsePayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/getRandomSongs/GET/responses/200/content/json/subsonic-response/value1`.
                            public var value1: Components.Schemas.Response
                            /// - Remark: Generated from `#/paths/getRandomSongs/GET/responses/200/content/json/subsonic-response/value2`.
                            public struct Value2Payload: Codable, Hashable, Sendable {
                                /// - Remark: Generated from `#/paths/getRandomSongs/GET/responses/200/content/json/subsonic-response/value2/randomSongs`.
                                public var randomSongs: Components.Schemas.Songs
                                /// Creates a new `Value2Payload`.
                                ///
                                /// - Parameters:
                                ///   - randomSongs:
                                public init(randomSongs: Components.Schemas.Songs) {
                                    self.randomSongs = randomSongs
                                }
                                public enum CodingKeys: String, CodingKey {
                                    case randomSongs
                                }
                            }
                            /// - Remark: Generated from `#/paths/getRandomSongs/GET/responses/200/content/json/subsonic-response/value2`.
                            public var value2: Operations.getRandomSongs.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload.Value2Payload
                            /// Creates a new `subsonic_hyphen_responsePayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.Response,
                                value2: Operations.getRandomSongs.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload.Value2Payload
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                value1 = try .init(from: decoder)
                                value2 = try .init(from: decoder)
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try value1.encode(to: encoder)
                                try value2.encode(to: encoder)
                            }
                        }
                        /// - Remark: Generated from `#/paths/getRandomSongs/GET/responses/200/content/json/subsonic-response`.
                        public var subsonic_hyphen_response: Operations.getRandomSongs.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - subsonic_hyphen_response:
                        public init(subsonic_hyphen_response: Operations.getRandomSongs.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload) {
                            self.subsonic_hyphen_response = subsonic_hyphen_response
                        }
                        public enum CodingKeys: String, CodingKey {
                            case subsonic_hyphen_response = "subsonic-response"
                        }
                    }
                    /// - Remark: Generated from `#/paths/getRandomSongs/GET/responses/200/content/application\/json`.
                    case json(Operations.getRandomSongs.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getRandomSongs.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getRandomSongs.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getRandomSongs.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ok
            ///
            /// - Remark: Generated from `#/paths//getRandomSongs/get(getRandomSongs)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getRandomSongs.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getRandomSongs.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /getSongsByGenre`.
    /// - Remark: Generated from `#/paths//getSongsByGenre/get(getSongsByGenre)`.
    public enum getSongsByGenre {
        public static let id: Swift.String = "getSongsByGenre"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getSongsByGenre/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getSongsByGenre/GET/query/genre`.
                public var genre: Swift.String
                /// - Remark: Generated from `#/paths/getSongsByGenre/GET/query/count`.
                public var count: Swift.Int?
                /// - Remark: Generated from `#/paths/getSongsByGenre/GET/query/offset`.
                public var offset: Swift.Int?
                /// - Remark: Generated from `#/paths/getSongsByGenre/GET/query/musicFolderId`.
                public var musicFolderId: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - genre:
                ///   - count:
                ///   - offset:
                ///   - musicFolderId:
                public init(
                    genre: Swift.String,
                    count: Swift.Int? = nil,
                    offset: Swift.Int? = nil,
                    musicFolderId: Swift.Int? = nil
                ) {
                    self.genre = genre
                    self.count = count
                    self.offset = offset
                    self.musicFolderId = musicFolderId
                }
            }
            public var query: Operations.getSongsByGenre.Input.Query
            /// - Remark: Generated from `#/paths/getSongsByGenre/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getSongsByGenre.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getSongsByGenre.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getSongsByGenre.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.getSongsByGenre.Input.Query,
                headers: Operations.getSongsByGenre.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getSongsByGenre/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getSongsByGenre/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getSongsByGenre/GET/responses/200/content/json/subsonic-response`.
                        public struct subsonic_hyphen_responsePayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/getSongsByGenre/GET/responses/200/content/json/subsonic-response/value1`.
                            public var value1: Components.Schemas.Response
                            /// - Remark: Generated from `#/paths/getSongsByGenre/GET/responses/200/content/json/subsonic-response/value2`.
                            public struct Value2Payload: Codable, Hashable, Sendable {
                                /// - Remark: Generated from `#/paths/getSongsByGenre/GET/responses/200/content/json/subsonic-response/value2/songsByGenre`.
                                public var songsByGenre: Components.Schemas.Songs
                                /// Creates a new `Value2Payload`.
                                ///
                                /// - Parameters:
                                ///   - songsByGenre:
                                public init(songsByGenre: Components.Schemas.Songs) {
                                    self.songsByGenre = songsByGenre
                                }
                                public enum CodingKeys: String, CodingKey {
                                    case songsByGenre
                                }
                            }
                            /// - Remark: Generated from `#/paths/getSongsByGenre/GET/responses/200/content/json/subsonic-response/value2`.
                            public var value2: Operations.getSongsByGenre.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload.Value2Payload
                            /// Creates a new `subsonic_hyphen_responsePayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.Response,
                                value2: Operations.getSongsByGenre.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload.Value2Payload
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                value1 = try .init(from: decoder)
                                value2 = try .init(from: decoder)
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try value1.encode(to: encoder)
                                try value2.encode(to: encoder)
                            }
                        }
                        /// - Remark: Generated from `#/paths/getSongsByGenre/GET/responses/200/content/json/subsonic-response`.
                        public var subsonic_hyphen_response: Operations.getSongsByGenre.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - subsonic_hyphen_response:
                        public init(subsonic_hyphen_response: Operations.getSongsByGenre.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload) {
                            self.subsonic_hyphen_response = subsonic_hyphen_response
                        }
                        public enum CodingKeys: String, CodingKey {
                            case subsonic_hyphen_response = "subsonic-response"
                        }
                    }
                    /// - Remark: Generated from `#/paths/getSongsByGenre/GET/responses/200/content/application\/json`.
                    case json(Operations.getSongsByGenre.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getSongsByGenre.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getSongsByGenre.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getSongsByGenre.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ok
            ///
            /// - Remark: Generated from `#/paths//getSongsByGenre/get(getSongsByGenre)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getSongsByGenre.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getSongsByGenre.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /getStarred`.
    /// - Remark: Generated from `#/paths//getStarred/get(getStarred)`.
    public enum getStarred {
        public static let id: Swift.String = "getStarred"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getStarred/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getStarred/GET/query/musicFolderId`.
                public var musicFolderId: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - musicFolderId:
                public init(musicFolderId: Swift.Int? = nil) {
                    self.musicFolderId = musicFolderId
                }
            }
            public var query: Operations.getStarred.Input.Query
            /// - Remark: Generated from `#/paths/getStarred/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getStarred.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getStarred.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getStarred.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.getStarred.Input.Query = .init(),
                headers: Operations.getStarred.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getStarred/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getStarred/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getStarred/GET/responses/200/content/json/subsonic-response`.
                        public struct subsonic_hyphen_responsePayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/getStarred/GET/responses/200/content/json/subsonic-response/value1`.
                            public var value1: Components.Schemas.Response
                            /// - Remark: Generated from `#/paths/getStarred/GET/responses/200/content/json/subsonic-response/value2`.
                            public struct Value2Payload: Codable, Hashable, Sendable {
                                /// - Remark: Generated from `#/paths/getStarred/GET/responses/200/content/json/subsonic-response/value2/starred`.
                                public var starred: Components.Schemas.Starred
                                /// Creates a new `Value2Payload`.
                                ///
                                /// - Parameters:
                                ///   - starred:
                                public init(starred: Components.Schemas.Starred) {
                                    self.starred = starred
                                }
                                public enum CodingKeys: String, CodingKey {
                                    case starred
                                }
                            }
                            /// - Remark: Generated from `#/paths/getStarred/GET/responses/200/content/json/subsonic-response/value2`.
                            public var value2: Operations.getStarred.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload.Value2Payload
                            /// Creates a new `subsonic_hyphen_responsePayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.Response,
                                value2: Operations.getStarred.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload.Value2Payload
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                value1 = try .init(from: decoder)
                                value2 = try .init(from: decoder)
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try value1.encode(to: encoder)
                                try value2.encode(to: encoder)
                            }
                        }
                        /// - Remark: Generated from `#/paths/getStarred/GET/responses/200/content/json/subsonic-response`.
                        public var subsonic_hyphen_response: Operations.getStarred.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - subsonic_hyphen_response:
                        public init(subsonic_hyphen_response: Operations.getStarred.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload) {
                            self.subsonic_hyphen_response = subsonic_hyphen_response
                        }
                        public enum CodingKeys: String, CodingKey {
                            case subsonic_hyphen_response = "subsonic-response"
                        }
                    }
                    /// - Remark: Generated from `#/paths/getStarred/GET/responses/200/content/application\/json`.
                    case json(Operations.getStarred.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getStarred.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getStarred.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getStarred.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ok
            ///
            /// - Remark: Generated from `#/paths//getStarred/get(getStarred)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getStarred.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getStarred.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /search2`.
    /// - Remark: Generated from `#/paths//search2/get(search)`.
    public enum search {
        public static let id: Swift.String = "search"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/search2/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/search2/GET/query/query`.
                public var query: Swift.String
                /// - Remark: Generated from `#/paths/search2/GET/query/artistCount`.
                public var artistCount: Swift.Int?
                /// - Remark: Generated from `#/paths/search2/GET/query/artistOffset`.
                public var artistOffset: Swift.Int?
                /// - Remark: Generated from `#/paths/search2/GET/query/albumCount`.
                public var albumCount: Swift.Int?
                /// - Remark: Generated from `#/paths/search2/GET/query/albumOffset`.
                public var albumOffset: Swift.Int?
                /// - Remark: Generated from `#/paths/search2/GET/query/songCount`.
                public var songCount: Swift.Int?
                /// - Remark: Generated from `#/paths/search2/GET/query/songOffset`.
                public var songOffset: Swift.Int?
                /// - Remark: Generated from `#/paths/search2/GET/query/musicFolderId`.
                public var musicFolderId: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - query:
                ///   - artistCount:
                ///   - artistOffset:
                ///   - albumCount:
                ///   - albumOffset:
                ///   - songCount:
                ///   - songOffset:
                ///   - musicFolderId:
                public init(
                    query: Swift.String,
                    artistCount: Swift.Int? = nil,
                    artistOffset: Swift.Int? = nil,
                    albumCount: Swift.Int? = nil,
                    albumOffset: Swift.Int? = nil,
                    songCount: Swift.Int? = nil,
                    songOffset: Swift.Int? = nil,
                    musicFolderId: Swift.Int? = nil
                ) {
                    self.query = query
                    self.artistCount = artistCount
                    self.artistOffset = artistOffset
                    self.albumCount = albumCount
                    self.albumOffset = albumOffset
                    self.songCount = songCount
                    self.songOffset = songOffset
                    self.musicFolderId = musicFolderId
                }
            }
            public var query: Operations.search.Input.Query
            /// - Remark: Generated from `#/paths/search2/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.search.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.search.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.search.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.search.Input.Query,
                headers: Operations.search.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/search2/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/search2/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/search2/GET/responses/200/content/json/subsonic-response`.
                        public struct subsonic_hyphen_responsePayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/search2/GET/responses/200/content/json/subsonic-response/value1`.
                            public var value1: Components.Schemas.Response
                            /// - Remark: Generated from `#/paths/search2/GET/responses/200/content/json/subsonic-response/value2`.
                            public struct Value2Payload: Codable, Hashable, Sendable {
                                /// - Remark: Generated from `#/paths/search2/GET/responses/200/content/json/subsonic-response/value2/searchResult2`.
                                public var searchResult2: Components.Schemas.SearchResult
                                /// Creates a new `Value2Payload`.
                                ///
                                /// - Parameters:
                                ///   - searchResult2:
                                public init(searchResult2: Components.Schemas.SearchResult) {
                                    self.searchResult2 = searchResult2
                                }
                                public enum CodingKeys: String, CodingKey {
                                    case searchResult2
                                }
                            }
                            /// - Remark: Generated from `#/paths/search2/GET/responses/200/content/json/subsonic-response/value2`.
                            public var value2: Operations.search.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload.Value2Payload
                            /// Creates a new `subsonic_hyphen_responsePayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.Response,
                                value2: Operations.search.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload.Value2Payload
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                value1 = try .init(from: decoder)
                                value2 = try .init(from: decoder)
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try value1.encode(to: encoder)
                                try value2.encode(to: encoder)
                            }
                        }
                        /// - Remark: Generated from `#/paths/search2/GET/responses/200/content/json/subsonic-response`.
                        public var subsonic_hyphen_response: Operations.search.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - subsonic_hyphen_response:
                        public init(subsonic_hyphen_response: Operations.search.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload) {
                            self.subsonic_hyphen_response = subsonic_hyphen_response
                        }
                        public enum CodingKeys: String, CodingKey {
                            case subsonic_hyphen_response = "subsonic-response"
                        }
                    }
                    /// - Remark: Generated from `#/paths/search2/GET/responses/200/content/application\/json`.
                    case json(Operations.search.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.search.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.search.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.search.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ok
            ///
            /// - Remark: Generated from `#/paths//search2/get(search)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.search.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.search.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /search3`.
    /// - Remark: Generated from `#/paths//search3/get(searchID3)`.
    public enum searchID3 {
        public static let id: Swift.String = "searchID3"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/search3/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/search3/GET/query/query`.
                public var query: Swift.String
                /// - Remark: Generated from `#/paths/search3/GET/query/artistCount`.
                public var artistCount: Swift.Int?
                /// - Remark: Generated from `#/paths/search3/GET/query/artistOffset`.
                public var artistOffset: Swift.Int?
                /// - Remark: Generated from `#/paths/search3/GET/query/albumCount`.
                public var albumCount: Swift.Int?
                /// - Remark: Generated from `#/paths/search3/GET/query/albumOffset`.
                public var albumOffset: Swift.Int?
                /// - Remark: Generated from `#/paths/search3/GET/query/songCount`.
                public var songCount: Swift.Int?
                /// - Remark: Generated from `#/paths/search3/GET/query/songOffset`.
                public var songOffset: Swift.Int?
                /// - Remark: Generated from `#/paths/search3/GET/query/musicFolderId`.
                public var musicFolderId: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - query:
                ///   - artistCount:
                ///   - artistOffset:
                ///   - albumCount:
                ///   - albumOffset:
                ///   - songCount:
                ///   - songOffset:
                ///   - musicFolderId:
                public init(
                    query: Swift.String,
                    artistCount: Swift.Int? = nil,
                    artistOffset: Swift.Int? = nil,
                    albumCount: Swift.Int? = nil,
                    albumOffset: Swift.Int? = nil,
                    songCount: Swift.Int? = nil,
                    songOffset: Swift.Int? = nil,
                    musicFolderId: Swift.Int? = nil
                ) {
                    self.query = query
                    self.artistCount = artistCount
                    self.artistOffset = artistOffset
                    self.albumCount = albumCount
                    self.albumOffset = albumOffset
                    self.songCount = songCount
                    self.songOffset = songOffset
                    self.musicFolderId = musicFolderId
                }
            }
            public var query: Operations.searchID3.Input.Query
            /// - Remark: Generated from `#/paths/search3/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.searchID3.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.searchID3.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.searchID3.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.searchID3.Input.Query,
                headers: Operations.searchID3.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/search3/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/search3/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/search3/GET/responses/200/content/json/subsonic-response`.
                        public struct subsonic_hyphen_responsePayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/search3/GET/responses/200/content/json/subsonic-response/value1`.
                            public var value1: Components.Schemas.Response
                            /// - Remark: Generated from `#/paths/search3/GET/responses/200/content/json/subsonic-response/value2`.
                            public struct Value2Payload: Codable, Hashable, Sendable {
                                /// - Remark: Generated from `#/paths/search3/GET/responses/200/content/json/subsonic-response/value2/searchResult3`.
                                public var searchResult3: Components.Schemas.SearchResultID3
                                /// Creates a new `Value2Payload`.
                                ///
                                /// - Parameters:
                                ///   - searchResult3:
                                public init(searchResult3: Components.Schemas.SearchResultID3) {
                                    self.searchResult3 = searchResult3
                                }
                                public enum CodingKeys: String, CodingKey {
                                    case searchResult3
                                }
                            }
                            /// - Remark: Generated from `#/paths/search3/GET/responses/200/content/json/subsonic-response/value2`.
                            public var value2: Operations.searchID3.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload.Value2Payload
                            /// Creates a new `subsonic_hyphen_responsePayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.Response,
                                value2: Operations.searchID3.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload.Value2Payload
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                value1 = try .init(from: decoder)
                                value2 = try .init(from: decoder)
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try value1.encode(to: encoder)
                                try value2.encode(to: encoder)
                            }
                        }
                        /// - Remark: Generated from `#/paths/search3/GET/responses/200/content/json/subsonic-response`.
                        public var subsonic_hyphen_response: Operations.searchID3.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - subsonic_hyphen_response:
                        public init(subsonic_hyphen_response: Operations.searchID3.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload) {
                            self.subsonic_hyphen_response = subsonic_hyphen_response
                        }
                        public enum CodingKeys: String, CodingKey {
                            case subsonic_hyphen_response = "subsonic-response"
                        }
                    }
                    /// - Remark: Generated from `#/paths/search3/GET/responses/200/content/application\/json`.
                    case json(Operations.searchID3.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.searchID3.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.searchID3.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.searchID3.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ok
            ///
            /// - Remark: Generated from `#/paths//search3/get(searchID3)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.searchID3.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.searchID3.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /getPlaylists`.
    /// - Remark: Generated from `#/paths//getPlaylists/get(getPlaylists)`.
    public enum getPlaylists {
        public static let id: Swift.String = "getPlaylists"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getPlaylists/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getPlaylists/GET/query/username`.
                public var username: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - username:
                public init(username: Swift.String? = nil) {
                    self.username = username
                }
            }
            public var query: Operations.getPlaylists.Input.Query
            /// - Remark: Generated from `#/paths/getPlaylists/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getPlaylists.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getPlaylists.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getPlaylists.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.getPlaylists.Input.Query = .init(),
                headers: Operations.getPlaylists.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getPlaylists/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getPlaylists/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getPlaylists/GET/responses/200/content/json/subsonic-response`.
                        public struct subsonic_hyphen_responsePayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/getPlaylists/GET/responses/200/content/json/subsonic-response/value1`.
                            public var value1: Components.Schemas.Response
                            /// - Remark: Generated from `#/paths/getPlaylists/GET/responses/200/content/json/subsonic-response/value2`.
                            public struct Value2Payload: Codable, Hashable, Sendable {
                                /// - Remark: Generated from `#/paths/getPlaylists/GET/responses/200/content/json/subsonic-response/value2/playlists`.
                                public var playlists: Components.Schemas.Playlists
                                /// Creates a new `Value2Payload`.
                                ///
                                /// - Parameters:
                                ///   - playlists:
                                public init(playlists: Components.Schemas.Playlists) {
                                    self.playlists = playlists
                                }
                                public enum CodingKeys: String, CodingKey {
                                    case playlists
                                }
                            }
                            /// - Remark: Generated from `#/paths/getPlaylists/GET/responses/200/content/json/subsonic-response/value2`.
                            public var value2: Operations.getPlaylists.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload.Value2Payload
                            /// Creates a new `subsonic_hyphen_responsePayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.Response,
                                value2: Operations.getPlaylists.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload.Value2Payload
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                value1 = try .init(from: decoder)
                                value2 = try .init(from: decoder)
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try value1.encode(to: encoder)
                                try value2.encode(to: encoder)
                            }
                        }
                        /// - Remark: Generated from `#/paths/getPlaylists/GET/responses/200/content/json/subsonic-response`.
                        public var subsonic_hyphen_response: Operations.getPlaylists.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - subsonic_hyphen_response:
                        public init(subsonic_hyphen_response: Operations.getPlaylists.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload) {
                            self.subsonic_hyphen_response = subsonic_hyphen_response
                        }
                        public enum CodingKeys: String, CodingKey {
                            case subsonic_hyphen_response = "subsonic-response"
                        }
                    }
                    /// - Remark: Generated from `#/paths/getPlaylists/GET/responses/200/content/application\/json`.
                    case json(Operations.getPlaylists.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getPlaylists.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getPlaylists.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getPlaylists.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ok
            ///
            /// - Remark: Generated from `#/paths//getPlaylists/get(getPlaylists)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getPlaylists.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getPlaylists.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /getPlaylist`.
    /// - Remark: Generated from `#/paths//getPlaylist/get(getPlaylist)`.
    public enum getPlaylist {
        public static let id: Swift.String = "getPlaylist"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getPlaylist/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getPlaylist/GET/query/id`.
                public var id: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.String) {
                    self.id = id
                }
            }
            public var query: Operations.getPlaylist.Input.Query
            /// - Remark: Generated from `#/paths/getPlaylist/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getPlaylist.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getPlaylist.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getPlaylist.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.getPlaylist.Input.Query,
                headers: Operations.getPlaylist.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getPlaylist/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getPlaylist/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getPlaylist/GET/responses/200/content/json/subsonic-response`.
                        public struct subsonic_hyphen_responsePayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/getPlaylist/GET/responses/200/content/json/subsonic-response/value1`.
                            public var value1: Components.Schemas.Response
                            /// - Remark: Generated from `#/paths/getPlaylist/GET/responses/200/content/json/subsonic-response/value2`.
                            public struct Value2Payload: Codable, Hashable, Sendable {
                                /// - Remark: Generated from `#/paths/getPlaylist/GET/responses/200/content/json/subsonic-response/value2/playlist`.
                                public var playlist: Components.Schemas.PlaylistWithSongs
                                /// Creates a new `Value2Payload`.
                                ///
                                /// - Parameters:
                                ///   - playlist:
                                public init(playlist: Components.Schemas.PlaylistWithSongs) {
                                    self.playlist = playlist
                                }
                                public enum CodingKeys: String, CodingKey {
                                    case playlist
                                }
                            }
                            /// - Remark: Generated from `#/paths/getPlaylist/GET/responses/200/content/json/subsonic-response/value2`.
                            public var value2: Operations.getPlaylist.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload.Value2Payload
                            /// Creates a new `subsonic_hyphen_responsePayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.Response,
                                value2: Operations.getPlaylist.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload.Value2Payload
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                value1 = try .init(from: decoder)
                                value2 = try .init(from: decoder)
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try value1.encode(to: encoder)
                                try value2.encode(to: encoder)
                            }
                        }
                        /// - Remark: Generated from `#/paths/getPlaylist/GET/responses/200/content/json/subsonic-response`.
                        public var subsonic_hyphen_response: Operations.getPlaylist.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - subsonic_hyphen_response:
                        public init(subsonic_hyphen_response: Operations.getPlaylist.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload) {
                            self.subsonic_hyphen_response = subsonic_hyphen_response
                        }
                        public enum CodingKeys: String, CodingKey {
                            case subsonic_hyphen_response = "subsonic-response"
                        }
                    }
                    /// - Remark: Generated from `#/paths/getPlaylist/GET/responses/200/content/application\/json`.
                    case json(Operations.getPlaylist.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getPlaylist.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getPlaylist.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getPlaylist.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ok
            ///
            /// - Remark: Generated from `#/paths//getPlaylist/get(getPlaylist)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getPlaylist.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getPlaylist.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `GET /getLyricsBySongId`.
    /// - Remark: Generated from `#/paths//getLyricsBySongId/get(getLyricsBySongId)`.
    public enum getLyricsBySongId {
        public static let id: Swift.String = "getLyricsBySongId"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/getLyricsBySongId/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getLyricsBySongId/GET/query/id`.
                public var id: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.String) {
                    self.id = id
                }
            }
            public var query: Operations.getLyricsBySongId.Input.Query
            /// - Remark: Generated from `#/paths/getLyricsBySongId/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getLyricsBySongId.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getLyricsBySongId.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getLyricsBySongId.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.getLyricsBySongId.Input.Query,
                headers: Operations.getLyricsBySongId.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/getLyricsBySongId/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/getLyricsBySongId/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/getLyricsBySongId/GET/responses/200/content/json/subsonic-response`.
                        public struct subsonic_hyphen_responsePayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/getLyricsBySongId/GET/responses/200/content/json/subsonic-response/value1`.
                            public var value1: Components.Schemas.Response
                            /// - Remark: Generated from `#/paths/getLyricsBySongId/GET/responses/200/content/json/subsonic-response/value2`.
                            public struct Value2Payload: Codable, Hashable, Sendable {
                                /// - Remark: Generated from `#/paths/getLyricsBySongId/GET/responses/200/content/json/subsonic-response/value2/lyricsList`.
                                public var lyricsList: Components.Schemas.LyricsList
                                /// Creates a new `Value2Payload`.
                                ///
                                /// - Parameters:
                                ///   - lyricsList:
                                public init(lyricsList: Components.Schemas.LyricsList) {
                                    self.lyricsList = lyricsList
                                }
                                public enum CodingKeys: String, CodingKey {
                                    case lyricsList
                                }
                            }
                            /// - Remark: Generated from `#/paths/getLyricsBySongId/GET/responses/200/content/json/subsonic-response/value2`.
                            public var value2: Operations.getLyricsBySongId.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload.Value2Payload
                            /// Creates a new `subsonic_hyphen_responsePayload`.
                            ///
                            /// - Parameters:
                            ///   - value1:
                            ///   - value2:
                            public init(
                                value1: Components.Schemas.Response,
                                value2: Operations.getLyricsBySongId.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload.Value2Payload
                            ) {
                                self.value1 = value1
                                self.value2 = value2
                            }
                            public init(from decoder: any Decoder) throws {
                                value1 = try .init(from: decoder)
                                value2 = try .init(from: decoder)
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try value1.encode(to: encoder)
                                try value2.encode(to: encoder)
                            }
                        }
                        /// - Remark: Generated from `#/paths/getLyricsBySongId/GET/responses/200/content/json/subsonic-response`.
                        public var subsonic_hyphen_response: Operations.getLyricsBySongId.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - subsonic_hyphen_response:
                        public init(subsonic_hyphen_response: Operations.getLyricsBySongId.Output.Ok.Body.jsonPayload.subsonic_hyphen_responsePayload) {
                            self.subsonic_hyphen_response = subsonic_hyphen_response
                        }
                        public enum CodingKeys: String, CodingKey {
                            case subsonic_hyphen_response = "subsonic-response"
                        }
                    }
                    /// - Remark: Generated from `#/paths/getLyricsBySongId/GET/responses/200/content/application\/json`.
                    case json(Operations.getLyricsBySongId.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getLyricsBySongId.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getLyricsBySongId.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getLyricsBySongId.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ok
            ///
            /// - Remark: Generated from `#/paths//getLyricsBySongId/get(getLyricsBySongId)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getLyricsBySongId.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getLyricsBySongId.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `POST /star`.
    /// - Remark: Generated from `#/paths//star/post(star)`.
    public enum star {
        public static let id: Swift.String = "star"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/star/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/star/POST/query/id`.
                public var id: Swift.String?
                /// - Remark: Generated from `#/paths/star/POST/query/albumId`.
                public var albumId: Swift.String?
                /// - Remark: Generated from `#/paths/star/POST/query/artistId`.
                public var artistId: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - albumId:
                ///   - artistId:
                public init(
                    id: Swift.String? = nil,
                    albumId: Swift.String? = nil,
                    artistId: Swift.String? = nil
                ) {
                    self.id = id
                    self.albumId = albumId
                    self.artistId = artistId
                }
            }
            public var query: Operations.star.Input.Query
            /// - Remark: Generated from `#/paths/star/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.star.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.star.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.star.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.star.Input.Query = .init(),
                headers: Operations.star.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/star/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/star/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/star/POST/responses/200/content/json/subsonic-response`.
                        public var subsonic_hyphen_response: Components.Schemas.Response
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - subsonic_hyphen_response:
                        public init(subsonic_hyphen_response: Components.Schemas.Response) {
                            self.subsonic_hyphen_response = subsonic_hyphen_response
                        }
                        public enum CodingKeys: String, CodingKey {
                            case subsonic_hyphen_response = "subsonic-response"
                        }
                    }
                    /// - Remark: Generated from `#/paths/star/POST/responses/200/content/application\/json`.
                    case json(Operations.star.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.star.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.star.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.star.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ok
            ///
            /// - Remark: Generated from `#/paths//star/post(star)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.star.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.star.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `POST /unstar`.
    /// - Remark: Generated from `#/paths//unstar/post(unstar)`.
    public enum unstar {
        public static let id: Swift.String = "unstar"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/unstar/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/unstar/POST/query/id`.
                public var id: Swift.String?
                /// - Remark: Generated from `#/paths/unstar/POST/query/albumId`.
                public var albumId: Swift.String?
                /// - Remark: Generated from `#/paths/unstar/POST/query/artistId`.
                public var artistId: Swift.String?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - albumId:
                ///   - artistId:
                public init(
                    id: Swift.String? = nil,
                    albumId: Swift.String? = nil,
                    artistId: Swift.String? = nil
                ) {
                    self.id = id
                    self.albumId = albumId
                    self.artistId = artistId
                }
            }
            public var query: Operations.unstar.Input.Query
            /// - Remark: Generated from `#/paths/unstar/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.unstar.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.unstar.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.unstar.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.unstar.Input.Query = .init(),
                headers: Operations.unstar.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/unstar/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/unstar/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/unstar/POST/responses/200/content/json/subsonic-response`.
                        public var subsonic_hyphen_response: Components.Schemas.Response
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - subsonic_hyphen_response:
                        public init(subsonic_hyphen_response: Components.Schemas.Response) {
                            self.subsonic_hyphen_response = subsonic_hyphen_response
                        }
                        public enum CodingKeys: String, CodingKey {
                            case subsonic_hyphen_response = "subsonic-response"
                        }
                    }
                    /// - Remark: Generated from `#/paths/unstar/POST/responses/200/content/application\/json`.
                    case json(Operations.unstar.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.unstar.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.unstar.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.unstar.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ok
            ///
            /// - Remark: Generated from `#/paths//unstar/post(unstar)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.unstar.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.unstar.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `POST /scrobble`.
    /// - Remark: Generated from `#/paths//scrobble/post(scrobble)`.
    public enum scrobble {
        public static let id: Swift.String = "scrobble"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/scrobble/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/scrobble/POST/query/id`.
                public var id: Swift.String
                /// - Remark: Generated from `#/paths/scrobble/POST/query/time`.
                public var time: Swift.Int?
                /// - Remark: Generated from `#/paths/scrobble/POST/query/submission`.
                public var submission: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - time:
                ///   - submission:
                public init(
                    id: Swift.String,
                    time: Swift.Int? = nil,
                    submission: Swift.Bool? = nil
                ) {
                    self.id = id
                    self.time = time
                    self.submission = submission
                }
            }
            public var query: Operations.scrobble.Input.Query
            /// - Remark: Generated from `#/paths/scrobble/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.scrobble.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.scrobble.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.scrobble.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.scrobble.Input.Query,
                headers: Operations.scrobble.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/scrobble/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/scrobble/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/scrobble/POST/responses/200/content/json/subsonic-response`.
                        public var subsonic_hyphen_response: Components.Schemas.Response
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - subsonic_hyphen_response:
                        public init(subsonic_hyphen_response: Components.Schemas.Response) {
                            self.subsonic_hyphen_response = subsonic_hyphen_response
                        }
                        public enum CodingKeys: String, CodingKey {
                            case subsonic_hyphen_response = "subsonic-response"
                        }
                    }
                    /// - Remark: Generated from `#/paths/scrobble/POST/responses/200/content/application\/json`.
                    case json(Operations.scrobble.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.scrobble.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.scrobble.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.scrobble.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ok
            ///
            /// - Remark: Generated from `#/paths//scrobble/post(scrobble)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.scrobble.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.scrobble.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
